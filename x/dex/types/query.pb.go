// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: neutron/dex/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	github_com_neutron_org_neutron_v4_utils_math "github.com/neutron-org/neutron/v4/utils/math"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetLimitOrderTrancheUserRequest struct {
	Address                string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	TrancheKey             string `protobuf:"bytes,2,opt,name=tranche_key,json=trancheKey,proto3" json:"tranche_key,omitempty"`
	CalcWithdrawableShares bool   `protobuf:"varint,3,opt,name=calc_withdrawable_shares,json=calcWithdrawableShares,proto3" json:"calc_withdrawable_shares,omitempty"`
}

func (m *QueryGetLimitOrderTrancheUserRequest) Reset()         { *m = QueryGetLimitOrderTrancheUserRequest{} }
func (m *QueryGetLimitOrderTrancheUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheUserRequest) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{2}
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheUserRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheUserRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetTrancheKey() string {
	if m != nil {
		return m.TrancheKey
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheUserRequest) GetCalcWithdrawableShares() bool {
	if m != nil {
		return m.CalcWithdrawableShares
	}
	return false
}

type QueryGetLimitOrderTrancheUserResponse struct {
	LimitOrderTrancheUser *LimitOrderTrancheUser `protobuf:"bytes,1,opt,name=limit_order_tranche_user,json=limitOrderTrancheUser,proto3" json:"limit_order_tranche_user,omitempty"`
	WithdrawableShares    *cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=withdrawable_shares,json=withdrawableShares,proto3,customtype=cosmossdk.io/math.Int" json:"withdrawable_shares" yaml:"withdrawable_shares"`
}

func (m *QueryGetLimitOrderTrancheUserResponse) Reset()         { *m = QueryGetLimitOrderTrancheUserResponse{} }
func (m *QueryGetLimitOrderTrancheUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheUserResponse) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{3}
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheUserResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheUserResponse) GetLimitOrderTrancheUser() *LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrderTrancheUser
	}
	return nil
}

type QueryAllLimitOrderTrancheUserRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheUserRequest) Reset()         { *m = QueryAllLimitOrderTrancheUserRequest{} }
func (m *QueryAllLimitOrderTrancheUserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheUserRequest) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{4}
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheUserRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheUserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderTrancheUserResponse struct {
	LimitOrderTrancheUser []*LimitOrderTrancheUser `protobuf:"bytes,1,rep,name=limit_order_tranche_user,json=limitOrderTrancheUser,proto3" json:"limit_order_tranche_user,omitempty"`
	Pagination            *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheUserResponse) Reset()         { *m = QueryAllLimitOrderTrancheUserResponse{} }
func (m *QueryAllLimitOrderTrancheUserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheUserResponse) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{5}
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheUserResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheUserResponse) GetLimitOrderTrancheUser() []*LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrderTrancheUser
	}
	return nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLimitOrderTrancheRequest struct {
	PairId     string `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	TickIndex  int64  `protobuf:"varint,2,opt,name=tick_index,json=tickIndex,proto3" json:"tick_index,omitempty"`
	TokenIn    string `protobuf:"bytes,3,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	TrancheKey string `protobuf:"bytes,4,opt,name=tranche_key,json=trancheKey,proto3" json:"tranche_key,omitempty"`
}

func (m *QueryGetLimitOrderTrancheRequest) Reset()         { *m = QueryGetLimitOrderTrancheRequest{} }
func (m *QueryGetLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{6}
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetLimitOrderTrancheRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryGetLimitOrderTrancheRequest) GetTrancheKey() string {
	if m != nil {
		return m.TrancheKey
	}
	return ""
}

type QueryGetLimitOrderTrancheResponse struct {
	LimitOrderTranche *LimitOrderTranche `protobuf:"bytes,1,opt,name=limit_order_tranche,json=limitOrderTranche,proto3" json:"limit_order_tranche,omitempty"`
}

func (m *QueryGetLimitOrderTrancheResponse) Reset()         { *m = QueryGetLimitOrderTrancheResponse{} }
func (m *QueryGetLimitOrderTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLimitOrderTrancheResponse) ProtoMessage()    {}
func (*QueryGetLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{7}
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryGetLimitOrderTrancheResponse) GetLimitOrderTranche() *LimitOrderTranche {
	if m != nil {
		return m.LimitOrderTranche
	}
	return nil
}

type QueryAllLimitOrderTrancheRequest struct {
	PairId     string             `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	TokenIn    string             `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheRequest) Reset()         { *m = QueryAllLimitOrderTrancheRequest{} }
func (m *QueryAllLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{8}
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryAllLimitOrderTrancheRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryAllLimitOrderTrancheRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderTrancheResponse struct {
	LimitOrderTranche []*LimitOrderTranche `protobuf:"bytes,1,rep,name=limit_order_tranche,json=limitOrderTranche,proto3" json:"limit_order_tranche,omitempty"`
	Pagination        *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheResponse) Reset()         { *m = QueryAllLimitOrderTrancheResponse{} }
func (m *QueryAllLimitOrderTrancheResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLimitOrderTrancheResponse) ProtoMessage()    {}
func (*QueryAllLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{9}
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheResponse) GetLimitOrderTranche() []*LimitOrderTranche {
	if m != nil {
		return m.LimitOrderTranche
	}
	return nil
}

func (m *QueryAllLimitOrderTrancheResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllUserDepositsRequest struct {
	Address         string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination      *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	IncludePoolData bool               `protobuf:"varint,3,opt,name=include_pool_data,json=includePoolData,proto3" json:"include_pool_data,omitempty"`
}

func (m *QueryAllUserDepositsRequest) Reset()         { *m = QueryAllUserDepositsRequest{} }
func (m *QueryAllUserDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserDepositsRequest) ProtoMessage()    {}
func (*QueryAllUserDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{10}
}
func (m *QueryAllUserDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserDepositsRequest.Merge(m, src)
}
func (m *QueryAllUserDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserDepositsRequest proto.InternalMessageInfo

func (m *QueryAllUserDepositsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAllUserDepositsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAllUserDepositsRequest) GetIncludePoolData() bool {
	if m != nil {
		return m.IncludePoolData
	}
	return false
}

type QueryAllUserDepositsResponse struct {
	Deposits   []*DepositRecord    `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUserDepositsResponse) Reset()         { *m = QueryAllUserDepositsResponse{} }
func (m *QueryAllUserDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUserDepositsResponse) ProtoMessage()    {}
func (*QueryAllUserDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{11}
}
func (m *QueryAllUserDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUserDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUserDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUserDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUserDepositsResponse.Merge(m, src)
}
func (m *QueryAllUserDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUserDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUserDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUserDepositsResponse proto.InternalMessageInfo

func (m *QueryAllUserDepositsResponse) GetDeposits() []*DepositRecord {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func (m *QueryAllUserDepositsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderTrancheUserByAddressRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheUserByAddressRequest) Reset() {
	*m = QueryAllLimitOrderTrancheUserByAddressRequest{}
}
func (m *QueryAllLimitOrderTrancheUserByAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLimitOrderTrancheUserByAddressRequest) ProtoMessage() {}
func (*QueryAllLimitOrderTrancheUserByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{12}
}
func (m *QueryAllLimitOrderTrancheUserByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheUserByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheUserByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheUserByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserByAddressRequest.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheUserByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheUserByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheUserByAddressRequest proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheUserByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAllLimitOrderTrancheUserByAddressRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLimitOrderTrancheUserByAddressResponse struct {
	LimitOrders []*LimitOrderTrancheUser `protobuf:"bytes,1,rep,name=limit_orders,json=limitOrders,proto3" json:"limit_orders,omitempty"`
	Pagination  *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLimitOrderTrancheUserByAddressResponse) Reset() {
	*m = QueryAllLimitOrderTrancheUserByAddressResponse{}
}
func (m *QueryAllLimitOrderTrancheUserByAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllLimitOrderTrancheUserByAddressResponse) ProtoMessage() {}
func (*QueryAllLimitOrderTrancheUserByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{13}
}
func (m *QueryAllLimitOrderTrancheUserByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLimitOrderTrancheUserByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLimitOrderTrancheUserByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLimitOrderTrancheUserByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserByAddressResponse.Merge(m, src)
}
func (m *QueryAllLimitOrderTrancheUserByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLimitOrderTrancheUserByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLimitOrderTrancheUserByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLimitOrderTrancheUserByAddressResponse proto.InternalMessageInfo

func (m *QueryAllLimitOrderTrancheUserByAddressResponse) GetLimitOrders() []*LimitOrderTrancheUser {
	if m != nil {
		return m.LimitOrders
	}
	return nil
}

func (m *QueryAllLimitOrderTrancheUserByAddressResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTickLiquidityRequest struct {
	PairId     string             `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	TokenIn    string             `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickLiquidityRequest) Reset()         { *m = QueryAllTickLiquidityRequest{} }
func (m *QueryAllTickLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickLiquidityRequest) ProtoMessage()    {}
func (*QueryAllTickLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{14}
}
func (m *QueryAllTickLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickLiquidityRequest.Merge(m, src)
}
func (m *QueryAllTickLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickLiquidityRequest proto.InternalMessageInfo

func (m *QueryAllTickLiquidityRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryAllTickLiquidityRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryAllTickLiquidityRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTickLiquidityResponse struct {
	TickLiquidity []*TickLiquidity    `protobuf:"bytes,1,rep,name=tick_liquidity,json=tickLiquidity,proto3" json:"tick_liquidity,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTickLiquidityResponse) Reset()         { *m = QueryAllTickLiquidityResponse{} }
func (m *QueryAllTickLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTickLiquidityResponse) ProtoMessage()    {}
func (*QueryAllTickLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{15}
}
func (m *QueryAllTickLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTickLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTickLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTickLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTickLiquidityResponse.Merge(m, src)
}
func (m *QueryAllTickLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTickLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTickLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTickLiquidityResponse proto.InternalMessageInfo

func (m *QueryAllTickLiquidityResponse) GetTickLiquidity() []*TickLiquidity {
	if m != nil {
		return m.TickLiquidity
	}
	return nil
}

func (m *QueryAllTickLiquidityResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInactiveLimitOrderTrancheRequest struct {
	PairId     string `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	TokenIn    string `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	TickIndex  int64  `protobuf:"varint,3,opt,name=tick_index,json=tickIndex,proto3" json:"tick_index,omitempty"`
	TrancheKey string `protobuf:"bytes,4,opt,name=tranche_key,json=trancheKey,proto3" json:"tranche_key,omitempty"`
}

func (m *QueryGetInactiveLimitOrderTrancheRequest) Reset() {
	*m = QueryGetInactiveLimitOrderTrancheRequest{}
}
func (m *QueryGetInactiveLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInactiveLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryGetInactiveLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{16}
}
func (m *QueryGetInactiveLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInactiveLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInactiveLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInactiveLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInactiveLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryGetInactiveLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInactiveLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInactiveLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInactiveLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryGetInactiveLimitOrderTrancheRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetInactiveLimitOrderTrancheRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryGetInactiveLimitOrderTrancheRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetInactiveLimitOrderTrancheRequest) GetTrancheKey() string {
	if m != nil {
		return m.TrancheKey
	}
	return ""
}

type QueryGetInactiveLimitOrderTrancheResponse struct {
	InactiveLimitOrderTranche *LimitOrderTranche `protobuf:"bytes,1,opt,name=inactive_limit_order_tranche,json=inactiveLimitOrderTranche,proto3" json:"inactive_limit_order_tranche,omitempty"`
}

func (m *QueryGetInactiveLimitOrderTrancheResponse) Reset() {
	*m = QueryGetInactiveLimitOrderTrancheResponse{}
}
func (m *QueryGetInactiveLimitOrderTrancheResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetInactiveLimitOrderTrancheResponse) ProtoMessage() {}
func (*QueryGetInactiveLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{17}
}
func (m *QueryGetInactiveLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInactiveLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInactiveLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInactiveLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInactiveLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryGetInactiveLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInactiveLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInactiveLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInactiveLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryGetInactiveLimitOrderTrancheResponse) GetInactiveLimitOrderTranche() *LimitOrderTranche {
	if m != nil {
		return m.InactiveLimitOrderTranche
	}
	return nil
}

type QueryAllInactiveLimitOrderTrancheRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInactiveLimitOrderTrancheRequest) Reset() {
	*m = QueryAllInactiveLimitOrderTrancheRequest{}
}
func (m *QueryAllInactiveLimitOrderTrancheRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInactiveLimitOrderTrancheRequest) ProtoMessage()    {}
func (*QueryAllInactiveLimitOrderTrancheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{18}
}
func (m *QueryAllInactiveLimitOrderTrancheRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInactiveLimitOrderTrancheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInactiveLimitOrderTrancheRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInactiveLimitOrderTrancheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInactiveLimitOrderTrancheRequest.Merge(m, src)
}
func (m *QueryAllInactiveLimitOrderTrancheRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInactiveLimitOrderTrancheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInactiveLimitOrderTrancheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInactiveLimitOrderTrancheRequest proto.InternalMessageInfo

func (m *QueryAllInactiveLimitOrderTrancheRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInactiveLimitOrderTrancheResponse struct {
	InactiveLimitOrderTranche []*LimitOrderTranche `protobuf:"bytes,1,rep,name=inactive_limit_order_tranche,json=inactiveLimitOrderTranche,proto3" json:"inactive_limit_order_tranche,omitempty"`
	Pagination                *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInactiveLimitOrderTrancheResponse) Reset() {
	*m = QueryAllInactiveLimitOrderTrancheResponse{}
}
func (m *QueryAllInactiveLimitOrderTrancheResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllInactiveLimitOrderTrancheResponse) ProtoMessage() {}
func (*QueryAllInactiveLimitOrderTrancheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{19}
}
func (m *QueryAllInactiveLimitOrderTrancheResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInactiveLimitOrderTrancheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInactiveLimitOrderTrancheResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInactiveLimitOrderTrancheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInactiveLimitOrderTrancheResponse.Merge(m, src)
}
func (m *QueryAllInactiveLimitOrderTrancheResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInactiveLimitOrderTrancheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInactiveLimitOrderTrancheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInactiveLimitOrderTrancheResponse proto.InternalMessageInfo

func (m *QueryAllInactiveLimitOrderTrancheResponse) GetInactiveLimitOrderTranche() []*LimitOrderTranche {
	if m != nil {
		return m.InactiveLimitOrderTranche
	}
	return nil
}

func (m *QueryAllInactiveLimitOrderTrancheResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolReservesRequest struct {
	PairId     string             `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	TokenIn    string             `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolReservesRequest) Reset()         { *m = QueryAllPoolReservesRequest{} }
func (m *QueryAllPoolReservesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolReservesRequest) ProtoMessage()    {}
func (*QueryAllPoolReservesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{20}
}
func (m *QueryAllPoolReservesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolReservesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolReservesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolReservesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolReservesRequest.Merge(m, src)
}
func (m *QueryAllPoolReservesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolReservesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolReservesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolReservesRequest proto.InternalMessageInfo

func (m *QueryAllPoolReservesRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryAllPoolReservesRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryAllPoolReservesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolReservesResponse struct {
	PoolReserves []*PoolReserves     `protobuf:"bytes,1,rep,name=pool_reserves,json=poolReserves,proto3" json:"pool_reserves,omitempty"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolReservesResponse) Reset()         { *m = QueryAllPoolReservesResponse{} }
func (m *QueryAllPoolReservesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolReservesResponse) ProtoMessage()    {}
func (*QueryAllPoolReservesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{21}
}
func (m *QueryAllPoolReservesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolReservesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolReservesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolReservesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolReservesResponse.Merge(m, src)
}
func (m *QueryAllPoolReservesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolReservesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolReservesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolReservesResponse proto.InternalMessageInfo

func (m *QueryAllPoolReservesResponse) GetPoolReserves() []*PoolReserves {
	if m != nil {
		return m.PoolReserves
	}
	return nil
}

func (m *QueryAllPoolReservesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPoolReservesRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	TokenIn   string `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	TickIndex int64  `protobuf:"varint,3,opt,name=tick_index,json=tickIndex,proto3" json:"tick_index,omitempty"`
	Fee       uint64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryGetPoolReservesRequest) Reset()         { *m = QueryGetPoolReservesRequest{} }
func (m *QueryGetPoolReservesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolReservesRequest) ProtoMessage()    {}
func (*QueryGetPoolReservesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{22}
}
func (m *QueryGetPoolReservesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolReservesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolReservesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolReservesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolReservesRequest.Merge(m, src)
}
func (m *QueryGetPoolReservesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolReservesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolReservesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolReservesRequest proto.InternalMessageInfo

func (m *QueryGetPoolReservesRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryGetPoolReservesRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryGetPoolReservesRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryGetPoolReservesRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type QueryGetPoolReservesResponse struct {
	PoolReserves *PoolReserves `protobuf:"bytes,1,opt,name=pool_reserves,json=poolReserves,proto3" json:"pool_reserves,omitempty"`
}

func (m *QueryGetPoolReservesResponse) Reset()         { *m = QueryGetPoolReservesResponse{} }
func (m *QueryGetPoolReservesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolReservesResponse) ProtoMessage()    {}
func (*QueryGetPoolReservesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{23}
}
func (m *QueryGetPoolReservesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolReservesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolReservesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolReservesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolReservesResponse.Merge(m, src)
}
func (m *QueryGetPoolReservesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolReservesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolReservesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolReservesResponse proto.InternalMessageInfo

func (m *QueryGetPoolReservesResponse) GetPoolReserves() *PoolReserves {
	if m != nil {
		return m.PoolReserves
	}
	return nil
}

type QueryEstimateMultiHopSwapRequest struct {
	// DEPRECATED: Use QuerySimulateMultiHopSwap
	Creator        string                                               `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Receiver       string                                               `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Routes         []*MultiHopRoute                                     `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	AmountIn       cosmossdk_io_math.Int                                `protobuf:"bytes,4,opt,name=amount_in,json=amountIn,proto3,customtype=cosmossdk.io/math.Int" json:"amount_in" yaml:"amount_in"`
	ExitLimitPrice github_com_neutron_org_neutron_v4_utils_math.PrecDec `protobuf:"bytes,5,opt,name=exit_limit_price,json=exitLimitPrice,proto3,customtype=github.com/neutron-org/neutron/v4/utils/math.PrecDec" json:"exit_limit_price" yaml:"exit_limit_price"`
	// If pickBestRoute == true then all routes are run and the route with the
	// best price is chosen otherwise, the first succesful route is used.
	PickBestRoute bool `protobuf:"varint,6,opt,name=pick_best_route,json=pickBestRoute,proto3" json:"pick_best_route,omitempty"`
}

func (m *QueryEstimateMultiHopSwapRequest) Reset()         { *m = QueryEstimateMultiHopSwapRequest{} }
func (m *QueryEstimateMultiHopSwapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateMultiHopSwapRequest) ProtoMessage()    {}
func (*QueryEstimateMultiHopSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{24}
}
func (m *QueryEstimateMultiHopSwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateMultiHopSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateMultiHopSwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateMultiHopSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateMultiHopSwapRequest.Merge(m, src)
}
func (m *QueryEstimateMultiHopSwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateMultiHopSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateMultiHopSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateMultiHopSwapRequest proto.InternalMessageInfo

func (m *QueryEstimateMultiHopSwapRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryEstimateMultiHopSwapRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *QueryEstimateMultiHopSwapRequest) GetRoutes() []*MultiHopRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *QueryEstimateMultiHopSwapRequest) GetPickBestRoute() bool {
	if m != nil {
		return m.PickBestRoute
	}
	return false
}

type QueryEstimateMultiHopSwapResponse struct {
	CoinOut github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=coin_out,json=coinOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin_out"`
}

func (m *QueryEstimateMultiHopSwapResponse) Reset()         { *m = QueryEstimateMultiHopSwapResponse{} }
func (m *QueryEstimateMultiHopSwapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimateMultiHopSwapResponse) ProtoMessage()    {}
func (*QueryEstimateMultiHopSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{25}
}
func (m *QueryEstimateMultiHopSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimateMultiHopSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimateMultiHopSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimateMultiHopSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimateMultiHopSwapResponse.Merge(m, src)
}
func (m *QueryEstimateMultiHopSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimateMultiHopSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimateMultiHopSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimateMultiHopSwapResponse proto.InternalMessageInfo

type QueryEstimatePlaceLimitOrderRequest struct {
	// DEPRECATED: Use QuerySimulatePlaceLimitOrder
	Creator          string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Receiver         string                `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	TokenIn          string                `protobuf:"bytes,3,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty"`
	TokenOut         string                `protobuf:"bytes,4,opt,name=token_out,json=tokenOut,proto3" json:"token_out,omitempty"`
	TickIndexInToOut int64                 `protobuf:"varint,5,opt,name=tick_index_in_to_out,json=tickIndexInToOut,proto3" json:"tick_index_in_to_out,omitempty"`
	AmountIn         cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=amount_in,json=amountIn,proto3,customtype=cosmossdk.io/math.Int" json:"amount_in" yaml:"amount_in"`
	OrderType        LimitOrderType        `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=neutron.dex.LimitOrderType" json:"order_type,omitempty"`
	// expirationTime is only valid iff orderType == GOOD_TIL_TIME.
	ExpirationTime *time.Time             `protobuf:"bytes,8,opt,name=expiration_time,json=expirationTime,proto3,stdtime" json:"expiration_time,omitempty"`
	MaxAmountOut   *cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=maxAmount_out,json=maxAmountOut,proto3,customtype=cosmossdk.io/math.Int" json:"max_amount_out" yaml:"max_amount_out"`
}

func (m *QueryEstimatePlaceLimitOrderRequest) Reset()         { *m = QueryEstimatePlaceLimitOrderRequest{} }
func (m *QueryEstimatePlaceLimitOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEstimatePlaceLimitOrderRequest) ProtoMessage()    {}
func (*QueryEstimatePlaceLimitOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{26}
}
func (m *QueryEstimatePlaceLimitOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimatePlaceLimitOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimatePlaceLimitOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimatePlaceLimitOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimatePlaceLimitOrderRequest.Merge(m, src)
}
func (m *QueryEstimatePlaceLimitOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimatePlaceLimitOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimatePlaceLimitOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimatePlaceLimitOrderRequest proto.InternalMessageInfo

func (m *QueryEstimatePlaceLimitOrderRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryEstimatePlaceLimitOrderRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *QueryEstimatePlaceLimitOrderRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *QueryEstimatePlaceLimitOrderRequest) GetTokenOut() string {
	if m != nil {
		return m.TokenOut
	}
	return ""
}

func (m *QueryEstimatePlaceLimitOrderRequest) GetTickIndexInToOut() int64 {
	if m != nil {
		return m.TickIndexInToOut
	}
	return 0
}

func (m *QueryEstimatePlaceLimitOrderRequest) GetOrderType() LimitOrderType {
	if m != nil {
		return m.OrderType
	}
	return LimitOrderType_GOOD_TIL_CANCELLED
}

func (m *QueryEstimatePlaceLimitOrderRequest) GetExpirationTime() *time.Time {
	if m != nil {
		return m.ExpirationTime
	}
	return nil
}

type QueryEstimatePlaceLimitOrderResponse struct {
	// Total amount of coin used for the limit order
	// You can derive makerLimitInCoin using the equation: totalInCoin =
	// swapInCoin + makerLimitInCoin
	TotalInCoin github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,opt,name=total_in_coin,json=totalInCoin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_in_coin" yaml:"total_in_coin"`
	// Total amount of the token in that was immediately swapped for swapOutCoin
	SwapInCoin github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=swap_in_coin,json=swapInCoin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"swap_in_coin" yaml:"swap_in_coin"`
	// Total amount of coin received from the taker portion of the limit order
	// This is the amount of coin immediately available in the users account after
	// executing the limit order. It does not include any future proceeds from the
	// maker portion which will have withdrawn in the future
	SwapOutCoin github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=swap_out_coin,json=swapOutCoin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"swap_out_coin" yaml:"swap_out_coin"`
}

func (m *QueryEstimatePlaceLimitOrderResponse) Reset()         { *m = QueryEstimatePlaceLimitOrderResponse{} }
func (m *QueryEstimatePlaceLimitOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEstimatePlaceLimitOrderResponse) ProtoMessage()    {}
func (*QueryEstimatePlaceLimitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{27}
}
func (m *QueryEstimatePlaceLimitOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEstimatePlaceLimitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEstimatePlaceLimitOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEstimatePlaceLimitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEstimatePlaceLimitOrderResponse.Merge(m, src)
}
func (m *QueryEstimatePlaceLimitOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEstimatePlaceLimitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEstimatePlaceLimitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEstimatePlaceLimitOrderResponse proto.InternalMessageInfo

type QueryPoolRequest struct {
	PairId    string `protobuf:"bytes,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	TickIndex int64  `protobuf:"varint,2,opt,name=tick_index,json=tickIndex,proto3" json:"tick_index,omitempty"`
	Fee       uint64 `protobuf:"varint,3,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *QueryPoolRequest) Reset()         { *m = QueryPoolRequest{} }
func (m *QueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRequest) ProtoMessage()    {}
func (*QueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{28}
}
func (m *QueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRequest.Merge(m, src)
}
func (m *QueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRequest proto.InternalMessageInfo

func (m *QueryPoolRequest) GetPairId() string {
	if m != nil {
		return m.PairId
	}
	return ""
}

func (m *QueryPoolRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *QueryPoolRequest) GetFee() uint64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

type QueryPoolByIDRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPoolByIDRequest) Reset()         { *m = QueryPoolByIDRequest{} }
func (m *QueryPoolByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolByIDRequest) ProtoMessage()    {}
func (*QueryPoolByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{29}
}
func (m *QueryPoolByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolByIDRequest.Merge(m, src)
}
func (m *QueryPoolByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolByIDRequest proto.InternalMessageInfo

func (m *QueryPoolByIDRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryPoolResponse struct {
	Pool *Pool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryPoolResponse) Reset()         { *m = QueryPoolResponse{} }
func (m *QueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolResponse) ProtoMessage()    {}
func (*QueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{30}
}
func (m *QueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolResponse.Merge(m, src)
}
func (m *QueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolResponse proto.InternalMessageInfo

func (m *QueryPoolResponse) GetPool() *Pool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type QueryGetPoolMetadataRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPoolMetadataRequest) Reset()         { *m = QueryGetPoolMetadataRequest{} }
func (m *QueryGetPoolMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolMetadataRequest) ProtoMessage()    {}
func (*QueryGetPoolMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{31}
}
func (m *QueryGetPoolMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolMetadataRequest.Merge(m, src)
}
func (m *QueryGetPoolMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolMetadataRequest proto.InternalMessageInfo

func (m *QueryGetPoolMetadataRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPoolMetadataResponse struct {
	PoolMetadata PoolMetadata `protobuf:"bytes,1,opt,name=Pool_metadata,json=PoolMetadata,proto3" json:"Pool_metadata"`
}

func (m *QueryGetPoolMetadataResponse) Reset()         { *m = QueryGetPoolMetadataResponse{} }
func (m *QueryGetPoolMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolMetadataResponse) ProtoMessage()    {}
func (*QueryGetPoolMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{32}
}
func (m *QueryGetPoolMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolMetadataResponse.Merge(m, src)
}
func (m *QueryGetPoolMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolMetadataResponse proto.InternalMessageInfo

func (m *QueryGetPoolMetadataResponse) GetPoolMetadata() PoolMetadata {
	if m != nil {
		return m.PoolMetadata
	}
	return PoolMetadata{}
}

type QueryAllPoolMetadataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolMetadataRequest) Reset()         { *m = QueryAllPoolMetadataRequest{} }
func (m *QueryAllPoolMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolMetadataRequest) ProtoMessage()    {}
func (*QueryAllPoolMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{33}
}
func (m *QueryAllPoolMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolMetadataRequest.Merge(m, src)
}
func (m *QueryAllPoolMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolMetadataRequest proto.InternalMessageInfo

func (m *QueryAllPoolMetadataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPoolMetadataResponse struct {
	PoolMetadata []PoolMetadata      `protobuf:"bytes,1,rep,name=pool_metadata,json=poolMetadata,proto3" json:"pool_metadata"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPoolMetadataResponse) Reset()         { *m = QueryAllPoolMetadataResponse{} }
func (m *QueryAllPoolMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPoolMetadataResponse) ProtoMessage()    {}
func (*QueryAllPoolMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{34}
}
func (m *QueryAllPoolMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPoolMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPoolMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPoolMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPoolMetadataResponse.Merge(m, src)
}
func (m *QueryAllPoolMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPoolMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPoolMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPoolMetadataResponse proto.InternalMessageInfo

func (m *QueryAllPoolMetadataResponse) GetPoolMetadata() []PoolMetadata {
	if m != nil {
		return m.PoolMetadata
	}
	return nil
}

func (m *QueryAllPoolMetadataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySimulateDepositRequest struct {
	Msg *MsgDeposit `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *QuerySimulateDepositRequest) Reset()         { *m = QuerySimulateDepositRequest{} }
func (m *QuerySimulateDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateDepositRequest) ProtoMessage()    {}
func (*QuerySimulateDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{35}
}
func (m *QuerySimulateDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateDepositRequest.Merge(m, src)
}
func (m *QuerySimulateDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateDepositRequest proto.InternalMessageInfo

func (m *QuerySimulateDepositRequest) GetMsg() *MsgDeposit {
	if m != nil {
		return m.Msg
	}
	return nil
}

type QuerySimulateDepositResponse struct {
	Resp *MsgDepositResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *QuerySimulateDepositResponse) Reset()         { *m = QuerySimulateDepositResponse{} }
func (m *QuerySimulateDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateDepositResponse) ProtoMessage()    {}
func (*QuerySimulateDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{36}
}
func (m *QuerySimulateDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateDepositResponse.Merge(m, src)
}
func (m *QuerySimulateDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateDepositResponse proto.InternalMessageInfo

func (m *QuerySimulateDepositResponse) GetResp() *MsgDepositResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type QuerySimulateWithdrawalRequest struct {
	Msg *MsgWithdrawal `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *QuerySimulateWithdrawalRequest) Reset()         { *m = QuerySimulateWithdrawalRequest{} }
func (m *QuerySimulateWithdrawalRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateWithdrawalRequest) ProtoMessage()    {}
func (*QuerySimulateWithdrawalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{37}
}
func (m *QuerySimulateWithdrawalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateWithdrawalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateWithdrawalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateWithdrawalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateWithdrawalRequest.Merge(m, src)
}
func (m *QuerySimulateWithdrawalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateWithdrawalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateWithdrawalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateWithdrawalRequest proto.InternalMessageInfo

func (m *QuerySimulateWithdrawalRequest) GetMsg() *MsgWithdrawal {
	if m != nil {
		return m.Msg
	}
	return nil
}

type QuerySimulateWithdrawalResponse struct {
	Resp *MsgWithdrawalResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *QuerySimulateWithdrawalResponse) Reset()         { *m = QuerySimulateWithdrawalResponse{} }
func (m *QuerySimulateWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateWithdrawalResponse) ProtoMessage()    {}
func (*QuerySimulateWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{38}
}
func (m *QuerySimulateWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateWithdrawalResponse.Merge(m, src)
}
func (m *QuerySimulateWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateWithdrawalResponse proto.InternalMessageInfo

func (m *QuerySimulateWithdrawalResponse) GetResp() *MsgWithdrawalResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type QuerySimulatePlaceLimitOrderRequest struct {
	Msg *MsgPlaceLimitOrder `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *QuerySimulatePlaceLimitOrderRequest) Reset()         { *m = QuerySimulatePlaceLimitOrderRequest{} }
func (m *QuerySimulatePlaceLimitOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySimulatePlaceLimitOrderRequest) ProtoMessage()    {}
func (*QuerySimulatePlaceLimitOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{39}
}
func (m *QuerySimulatePlaceLimitOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulatePlaceLimitOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulatePlaceLimitOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulatePlaceLimitOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulatePlaceLimitOrderRequest.Merge(m, src)
}
func (m *QuerySimulatePlaceLimitOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulatePlaceLimitOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulatePlaceLimitOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulatePlaceLimitOrderRequest proto.InternalMessageInfo

func (m *QuerySimulatePlaceLimitOrderRequest) GetMsg() *MsgPlaceLimitOrder {
	if m != nil {
		return m.Msg
	}
	return nil
}

type QuerySimulatePlaceLimitOrderResponse struct {
	Resp *MsgPlaceLimitOrderResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *QuerySimulatePlaceLimitOrderResponse) Reset()         { *m = QuerySimulatePlaceLimitOrderResponse{} }
func (m *QuerySimulatePlaceLimitOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySimulatePlaceLimitOrderResponse) ProtoMessage()    {}
func (*QuerySimulatePlaceLimitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{40}
}
func (m *QuerySimulatePlaceLimitOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulatePlaceLimitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulatePlaceLimitOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulatePlaceLimitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulatePlaceLimitOrderResponse.Merge(m, src)
}
func (m *QuerySimulatePlaceLimitOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulatePlaceLimitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulatePlaceLimitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulatePlaceLimitOrderResponse proto.InternalMessageInfo

func (m *QuerySimulatePlaceLimitOrderResponse) GetResp() *MsgPlaceLimitOrderResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type QuerySimulateWithdrawFilledLimitOrderRequest struct {
	Msg *MsgWithdrawFilledLimitOrder `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *QuerySimulateWithdrawFilledLimitOrderRequest) Reset() {
	*m = QuerySimulateWithdrawFilledLimitOrderRequest{}
}
func (m *QuerySimulateWithdrawFilledLimitOrderRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySimulateWithdrawFilledLimitOrderRequest) ProtoMessage() {}
func (*QuerySimulateWithdrawFilledLimitOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{41}
}
func (m *QuerySimulateWithdrawFilledLimitOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateWithdrawFilledLimitOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateWithdrawFilledLimitOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateWithdrawFilledLimitOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateWithdrawFilledLimitOrderRequest.Merge(m, src)
}
func (m *QuerySimulateWithdrawFilledLimitOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateWithdrawFilledLimitOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateWithdrawFilledLimitOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateWithdrawFilledLimitOrderRequest proto.InternalMessageInfo

func (m *QuerySimulateWithdrawFilledLimitOrderRequest) GetMsg() *MsgWithdrawFilledLimitOrder {
	if m != nil {
		return m.Msg
	}
	return nil
}

type QuerySimulateWithdrawFilledLimitOrderResponse struct {
	Resp *MsgWithdrawFilledLimitOrderResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *QuerySimulateWithdrawFilledLimitOrderResponse) Reset() {
	*m = QuerySimulateWithdrawFilledLimitOrderResponse{}
}
func (m *QuerySimulateWithdrawFilledLimitOrderResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySimulateWithdrawFilledLimitOrderResponse) ProtoMessage() {}
func (*QuerySimulateWithdrawFilledLimitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{42}
}
func (m *QuerySimulateWithdrawFilledLimitOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateWithdrawFilledLimitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateWithdrawFilledLimitOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateWithdrawFilledLimitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateWithdrawFilledLimitOrderResponse.Merge(m, src)
}
func (m *QuerySimulateWithdrawFilledLimitOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateWithdrawFilledLimitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateWithdrawFilledLimitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateWithdrawFilledLimitOrderResponse proto.InternalMessageInfo

func (m *QuerySimulateWithdrawFilledLimitOrderResponse) GetResp() *MsgWithdrawFilledLimitOrderResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type QuerySimulateCancelLimitOrderRequest struct {
	Msg *MsgCancelLimitOrder `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *QuerySimulateCancelLimitOrderRequest) Reset()         { *m = QuerySimulateCancelLimitOrderRequest{} }
func (m *QuerySimulateCancelLimitOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateCancelLimitOrderRequest) ProtoMessage()    {}
func (*QuerySimulateCancelLimitOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{43}
}
func (m *QuerySimulateCancelLimitOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateCancelLimitOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateCancelLimitOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateCancelLimitOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateCancelLimitOrderRequest.Merge(m, src)
}
func (m *QuerySimulateCancelLimitOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateCancelLimitOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateCancelLimitOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateCancelLimitOrderRequest proto.InternalMessageInfo

func (m *QuerySimulateCancelLimitOrderRequest) GetMsg() *MsgCancelLimitOrder {
	if m != nil {
		return m.Msg
	}
	return nil
}

type QuerySimulateCancelLimitOrderResponse struct {
	Resp *MsgCancelLimitOrderResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *QuerySimulateCancelLimitOrderResponse) Reset()         { *m = QuerySimulateCancelLimitOrderResponse{} }
func (m *QuerySimulateCancelLimitOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateCancelLimitOrderResponse) ProtoMessage()    {}
func (*QuerySimulateCancelLimitOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{44}
}
func (m *QuerySimulateCancelLimitOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateCancelLimitOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateCancelLimitOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateCancelLimitOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateCancelLimitOrderResponse.Merge(m, src)
}
func (m *QuerySimulateCancelLimitOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateCancelLimitOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateCancelLimitOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateCancelLimitOrderResponse proto.InternalMessageInfo

func (m *QuerySimulateCancelLimitOrderResponse) GetResp() *MsgCancelLimitOrderResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

type QuerySimulateMultiHopSwapRequest struct {
	Msg *MsgMultiHopSwap `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *QuerySimulateMultiHopSwapRequest) Reset()         { *m = QuerySimulateMultiHopSwapRequest{} }
func (m *QuerySimulateMultiHopSwapRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateMultiHopSwapRequest) ProtoMessage()    {}
func (*QuerySimulateMultiHopSwapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{45}
}
func (m *QuerySimulateMultiHopSwapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateMultiHopSwapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateMultiHopSwapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateMultiHopSwapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateMultiHopSwapRequest.Merge(m, src)
}
func (m *QuerySimulateMultiHopSwapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateMultiHopSwapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateMultiHopSwapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateMultiHopSwapRequest proto.InternalMessageInfo

func (m *QuerySimulateMultiHopSwapRequest) GetMsg() *MsgMultiHopSwap {
	if m != nil {
		return m.Msg
	}
	return nil
}

type QuerySimulateMultiHopSwapResponse struct {
	Resp *MsgMultiHopSwapResponse `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
}

func (m *QuerySimulateMultiHopSwapResponse) Reset()         { *m = QuerySimulateMultiHopSwapResponse{} }
func (m *QuerySimulateMultiHopSwapResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySimulateMultiHopSwapResponse) ProtoMessage()    {}
func (*QuerySimulateMultiHopSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6613ea5fce61e9c, []int{46}
}
func (m *QuerySimulateMultiHopSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySimulateMultiHopSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySimulateMultiHopSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySimulateMultiHopSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySimulateMultiHopSwapResponse.Merge(m, src)
}
func (m *QuerySimulateMultiHopSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySimulateMultiHopSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySimulateMultiHopSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySimulateMultiHopSwapResponse proto.InternalMessageInfo

func (m *QuerySimulateMultiHopSwapResponse) GetResp() *MsgMultiHopSwapResponse {
	if m != nil {
		return m.Resp
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "neutron.dex.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "neutron.dex.QueryParamsResponse")
	proto.RegisterType((*QueryGetLimitOrderTrancheUserRequest)(nil), "neutron.dex.QueryGetLimitOrderTrancheUserRequest")
	proto.RegisterType((*QueryGetLimitOrderTrancheUserResponse)(nil), "neutron.dex.QueryGetLimitOrderTrancheUserResponse")
	proto.RegisterType((*QueryAllLimitOrderTrancheUserRequest)(nil), "neutron.dex.QueryAllLimitOrderTrancheUserRequest")
	proto.RegisterType((*QueryAllLimitOrderTrancheUserResponse)(nil), "neutron.dex.QueryAllLimitOrderTrancheUserResponse")
	proto.RegisterType((*QueryGetLimitOrderTrancheRequest)(nil), "neutron.dex.QueryGetLimitOrderTrancheRequest")
	proto.RegisterType((*QueryGetLimitOrderTrancheResponse)(nil), "neutron.dex.QueryGetLimitOrderTrancheResponse")
	proto.RegisterType((*QueryAllLimitOrderTrancheRequest)(nil), "neutron.dex.QueryAllLimitOrderTrancheRequest")
	proto.RegisterType((*QueryAllLimitOrderTrancheResponse)(nil), "neutron.dex.QueryAllLimitOrderTrancheResponse")
	proto.RegisterType((*QueryAllUserDepositsRequest)(nil), "neutron.dex.QueryAllUserDepositsRequest")
	proto.RegisterType((*QueryAllUserDepositsResponse)(nil), "neutron.dex.QueryAllUserDepositsResponse")
	proto.RegisterType((*QueryAllLimitOrderTrancheUserByAddressRequest)(nil), "neutron.dex.QueryAllLimitOrderTrancheUserByAddressRequest")
	proto.RegisterType((*QueryAllLimitOrderTrancheUserByAddressResponse)(nil), "neutron.dex.QueryAllLimitOrderTrancheUserByAddressResponse")
	proto.RegisterType((*QueryAllTickLiquidityRequest)(nil), "neutron.dex.QueryAllTickLiquidityRequest")
	proto.RegisterType((*QueryAllTickLiquidityResponse)(nil), "neutron.dex.QueryAllTickLiquidityResponse")
	proto.RegisterType((*QueryGetInactiveLimitOrderTrancheRequest)(nil), "neutron.dex.QueryGetInactiveLimitOrderTrancheRequest")
	proto.RegisterType((*QueryGetInactiveLimitOrderTrancheResponse)(nil), "neutron.dex.QueryGetInactiveLimitOrderTrancheResponse")
	proto.RegisterType((*QueryAllInactiveLimitOrderTrancheRequest)(nil), "neutron.dex.QueryAllInactiveLimitOrderTrancheRequest")
	proto.RegisterType((*QueryAllInactiveLimitOrderTrancheResponse)(nil), "neutron.dex.QueryAllInactiveLimitOrderTrancheResponse")
	proto.RegisterType((*QueryAllPoolReservesRequest)(nil), "neutron.dex.QueryAllPoolReservesRequest")
	proto.RegisterType((*QueryAllPoolReservesResponse)(nil), "neutron.dex.QueryAllPoolReservesResponse")
	proto.RegisterType((*QueryGetPoolReservesRequest)(nil), "neutron.dex.QueryGetPoolReservesRequest")
	proto.RegisterType((*QueryGetPoolReservesResponse)(nil), "neutron.dex.QueryGetPoolReservesResponse")
	proto.RegisterType((*QueryEstimateMultiHopSwapRequest)(nil), "neutron.dex.QueryEstimateMultiHopSwapRequest")
	proto.RegisterType((*QueryEstimateMultiHopSwapResponse)(nil), "neutron.dex.QueryEstimateMultiHopSwapResponse")
	proto.RegisterType((*QueryEstimatePlaceLimitOrderRequest)(nil), "neutron.dex.QueryEstimatePlaceLimitOrderRequest")
	proto.RegisterType((*QueryEstimatePlaceLimitOrderResponse)(nil), "neutron.dex.QueryEstimatePlaceLimitOrderResponse")
	proto.RegisterType((*QueryPoolRequest)(nil), "neutron.dex.QueryPoolRequest")
	proto.RegisterType((*QueryPoolByIDRequest)(nil), "neutron.dex.QueryPoolByIDRequest")
	proto.RegisterType((*QueryPoolResponse)(nil), "neutron.dex.QueryPoolResponse")
	proto.RegisterType((*QueryGetPoolMetadataRequest)(nil), "neutron.dex.QueryGetPoolMetadataRequest")
	proto.RegisterType((*QueryGetPoolMetadataResponse)(nil), "neutron.dex.QueryGetPoolMetadataResponse")
	proto.RegisterType((*QueryAllPoolMetadataRequest)(nil), "neutron.dex.QueryAllPoolMetadataRequest")
	proto.RegisterType((*QueryAllPoolMetadataResponse)(nil), "neutron.dex.QueryAllPoolMetadataResponse")
	proto.RegisterType((*QuerySimulateDepositRequest)(nil), "neutron.dex.QuerySimulateDepositRequest")
	proto.RegisterType((*QuerySimulateDepositResponse)(nil), "neutron.dex.QuerySimulateDepositResponse")
	proto.RegisterType((*QuerySimulateWithdrawalRequest)(nil), "neutron.dex.QuerySimulateWithdrawalRequest")
	proto.RegisterType((*QuerySimulateWithdrawalResponse)(nil), "neutron.dex.QuerySimulateWithdrawalResponse")
	proto.RegisterType((*QuerySimulatePlaceLimitOrderRequest)(nil), "neutron.dex.QuerySimulatePlaceLimitOrderRequest")
	proto.RegisterType((*QuerySimulatePlaceLimitOrderResponse)(nil), "neutron.dex.QuerySimulatePlaceLimitOrderResponse")
	proto.RegisterType((*QuerySimulateWithdrawFilledLimitOrderRequest)(nil), "neutron.dex.QuerySimulateWithdrawFilledLimitOrderRequest")
	proto.RegisterType((*QuerySimulateWithdrawFilledLimitOrderResponse)(nil), "neutron.dex.QuerySimulateWithdrawFilledLimitOrderResponse")
	proto.RegisterType((*QuerySimulateCancelLimitOrderRequest)(nil), "neutron.dex.QuerySimulateCancelLimitOrderRequest")
	proto.RegisterType((*QuerySimulateCancelLimitOrderResponse)(nil), "neutron.dex.QuerySimulateCancelLimitOrderResponse")
	proto.RegisterType((*QuerySimulateMultiHopSwapRequest)(nil), "neutron.dex.QuerySimulateMultiHopSwapRequest")
	proto.RegisterType((*QuerySimulateMultiHopSwapResponse)(nil), "neutron.dex.QuerySimulateMultiHopSwapResponse")
}

func init() { proto.RegisterFile("neutron/dex/query.proto", fileDescriptor_b6613ea5fce61e9c) }

var fileDescriptor_b6613ea5fce61e9c = []byte{
	// 2742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdf, 0x6f, 0x1c, 0x47,
	0x1d, 0xcf, 0xf8, 0x5c, 0xc7, 0x1e, 0x3b, 0xb1, 0x33, 0x76, 0xea, 0xcb, 0xc5, 0xf1, 0xd9, 0xdb,
	0xa6, 0x76, 0xd2, 0xf8, 0x36, 0x76, 0xdb, 0x34, 0x4d, 0x28, 0x10, 0xd7, 0x4d, 0x62, 0xda, 0x10,
	0xb3, 0x09, 0x6d, 0x12, 0x8a, 0x56, 0xeb, 0xbb, 0x89, 0xbd, 0x78, 0x6f, 0x77, 0xb3, 0x3b, 0x17,
	0xfb, 0x14, 0xe5, 0xa5, 0x7d, 0x41, 0x08, 0xa4, 0x40, 0xf9, 0xa1, 0x14, 0xa9, 0x3c, 0x20, 0x90,
	0x10, 0x42, 0xe5, 0x97, 0x78, 0xe3, 0x05, 0x09, 0x54, 0x21, 0x84, 0x2a, 0x95, 0x07, 0x04, 0x92,
	0x41, 0x09, 0x4f, 0xe1, 0x05, 0xf9, 0x2f, 0x40, 0x33, 0xfb, 0xdd, 0xf3, 0xee, 0xed, 0xec, 0xed,
	0xd9, 0x39, 0x50, 0x9f, 0x7c, 0x3b, 0xf3, 0x9d, 0x99, 0xcf, 0xf7, 0x33, 0xdf, 0x99, 0xef, 0xcc,
	0x67, 0x8c, 0x47, 0x6d, 0x5a, 0x63, 0x9e, 0x63, 0xab, 0x15, 0xba, 0xa1, 0xde, 0xaa, 0x51, 0xaf,
	0x5e, 0x72, 0x3d, 0x87, 0x39, 0xa4, 0x1f, 0x2a, 0x4a, 0x15, 0xba, 0x51, 0x38, 0x5e, 0x76, 0xfc,
	0xaa, 0xe3, 0xab, 0xcb, 0x86, 0x4f, 0x03, 0x2b, 0xf5, 0xf6, 0xec, 0x32, 0x65, 0xc6, 0xac, 0xea,
	0x1a, 0x2b, 0xa6, 0x6d, 0x30, 0xd3, 0xb1, 0x83, 0x86, 0x85, 0xf1, 0xa8, 0x6d, 0x68, 0x55, 0x76,
	0xcc, 0xb0, 0x7e, 0x64, 0xc5, 0x59, 0x71, 0xc4, 0x4f, 0x95, 0xff, 0x82, 0xd2, 0xb1, 0x15, 0xc7,
	0x59, 0xb1, 0xa8, 0x6a, 0xb8, 0xa6, 0x6a, 0xd8, 0xb6, 0xc3, 0x44, 0x97, 0x3e, 0xd4, 0x16, 0xa1,
	0x56, 0x7c, 0x2d, 0xd7, 0x6e, 0xaa, 0xcc, 0xac, 0x52, 0x9f, 0x19, 0x55, 0x17, 0x0c, 0x26, 0xa2,
	0x6e, 0x54, 0xa8, 0xeb, 0xf8, 0x26, 0xd3, 0x3d, 0x5a, 0x76, 0xbc, 0x0a, 0x58, 0x1c, 0x8d, 0x5a,
	0x58, 0x66, 0xd5, 0x64, 0xba, 0xe3, 0x55, 0xa8, 0xa7, 0x33, 0xcf, 0xb0, 0xcb, 0xab, 0x14, 0xcc,
	0x8e, 0x67, 0x98, 0xe9, 0x35, 0x9f, 0x7a, 0x60, 0x9b, 0x8f, 0xda, 0xba, 0x86, 0x67, 0x54, 0x43,
	0xbc, 0x4f, 0xc6, 0x6a, 0x1c, 0xc7, 0x0a, 0xfd, 0x68, 0x2e, 0xd7, 0xab, 0x94, 0x19, 0x15, 0x83,
	0x19, 0xa9, 0x06, 0x1e, 0xf5, 0xa9, 0x77, 0x9b, 0xfa, 0x32, 0x47, 0x99, 0x59, 0x5e, 0xd3, 0x2d,
	0xf3, 0x56, 0xcd, 0xac, 0x98, 0xac, 0x1e, 0xf2, 0x1b, 0xb3, 0xd8, 0x08, 0x4a, 0x95, 0x11, 0x4c,
	0xbe, 0xc0, 0xe7, 0x6d, 0x49, 0xc0, 0xd4, 0xe8, 0xad, 0x1a, 0xf5, 0x99, 0x72, 0x11, 0x0f, 0xc7,
	0x4a, 0x7d, 0xd7, 0xb1, 0x7d, 0x4a, 0x66, 0x71, 0x4f, 0xe0, 0x4e, 0x1e, 0x4d, 0xa0, 0xe9, 0xfe,
	0xb9, 0xe1, 0x52, 0x24, 0x18, 0x4a, 0x81, 0xf1, 0x7c, 0xf7, 0x87, 0x9b, 0xc5, 0x3d, 0x1a, 0x18,
	0x2a, 0xdf, 0x47, 0xf8, 0x69, 0xd1, 0xd5, 0x05, 0xca, 0x5e, 0xe7, 0xb4, 0x5d, 0xe6, 0xac, 0x5d,
	0x0d, 0x48, 0xfb, 0xa2, 0x4f, 0x3d, 0x18, 0x92, 0xe4, 0xf1, 0x5e, 0xa3, 0x52, 0xf1, 0xa8, 0x1f,
	0x74, 0xde, 0xa7, 0x85, 0x9f, 0xa4, 0x88, 0xfb, 0x43, 0x92, 0xd7, 0x68, 0x3d, 0xdf, 0x25, 0x6a,
	0x31, 0x14, 0xbd, 0x46, 0xeb, 0xe4, 0x34, 0xce, 0x97, 0x0d, 0xab, 0xac, 0xaf, 0x9b, 0x6c, 0xb5,
	0xe2, 0x19, 0xeb, 0xc6, 0xb2, 0x45, 0x75, 0x7f, 0xd5, 0xf0, 0xa8, 0x9f, 0xcf, 0x4d, 0xa0, 0xe9,
	0x5e, 0xed, 0x49, 0x5e, 0xff, 0x66, 0xa4, 0xfa, 0x8a, 0xa8, 0x55, 0xee, 0x75, 0xe1, 0xa3, 0x19,
	0xe8, 0xc0, 0x75, 0x03, 0xe7, 0xd3, 0x66, 0x1d, 0xc8, 0x50, 0x62, 0x64, 0x48, 0x7b, 0x13, 0xdc,
	0x20, 0xed, 0xa0, 0x25, 0xab, 0x24, 0xef, 0x20, 0x3c, 0x2c, 0x73, 0x41, 0x38, 0x3c, 0xaf, 0xf1,
	0xa6, 0x7f, 0xdb, 0x2c, 0x1e, 0x0c, 0x96, 0x91, 0x5f, 0x59, 0x2b, 0x99, 0x8e, 0x5a, 0x35, 0xd8,
	0x6a, 0x69, 0xd1, 0x66, 0x8f, 0x36, 0x8b, 0xb2, 0xb6, 0x5b, 0x9b, 0xc5, 0x42, 0xdd, 0xa8, 0x5a,
	0x67, 0x14, 0x49, 0xa5, 0xa2, 0x91, 0xf5, 0x24, 0x25, 0x36, 0xcc, 0xd7, 0x39, 0xcb, 0x6a, 0x39,
	0x5f, 0xe7, 0x31, 0xde, 0x5e, 0xe2, 0x40, 0xc1, 0x33, 0xa5, 0x00, 0x5c, 0x89, 0xaf, 0xf1, 0x52,
	0xb0, 0x6b, 0xc0, 0x4a, 0x2f, 0x2d, 0x19, 0x2b, 0x14, 0xda, 0x6a, 0x91, 0x96, 0xca, 0xc7, 0x08,
	0xa6, 0x20, 0x7d, 0xc0, 0xb6, 0xa6, 0x20, 0xd7, 0x89, 0x29, 0xb8, 0x10, 0x73, 0xaa, 0x4b, 0x38,
	0x35, 0x95, 0xe9, 0x54, 0x80, 0x2f, 0xe6, 0xd5, 0x77, 0x11, 0x9e, 0x48, 0x0d, 0xac, 0x90, 0xc2,
	0x51, 0xbc, 0xd7, 0x35, 0x4c, 0x4f, 0x37, 0x2b, 0x10, 0xf2, 0x3d, 0xfc, 0x73, 0xb1, 0x42, 0x8e,
	0x60, 0x2c, 0x96, 0xb0, 0x69, 0x57, 0xe8, 0x86, 0x80, 0x91, 0xd3, 0xfa, 0x78, 0xc9, 0x22, 0x2f,
	0x20, 0x87, 0x70, 0x2f, 0x73, 0xd6, 0xa8, 0xad, 0x9b, 0xb6, 0x88, 0xef, 0x3e, 0x6d, 0xaf, 0xf8,
	0x5e, 0xb4, 0x9b, 0xd7, 0x4a, 0x77, 0xf3, 0x5a, 0x51, 0xea, 0x78, 0xb2, 0x05, 0x2e, 0x60, 0xfa,
	0x2a, 0x1e, 0x96, 0x30, 0x0d, 0x93, 0x3c, 0xde, 0x9a, 0x64, 0x20, 0xf8, 0x40, 0x82, 0x60, 0xe5,
	0xfd, 0x90, 0x13, 0xd9, 0x4c, 0x67, 0x72, 0x12, 0x75, 0xba, 0x2b, 0xee, 0x74, 0x3c, 0x14, 0x73,
	0xbb, 0x0e, 0xc5, 0xdf, 0x21, 0x20, 0x47, 0x0e, 0x30, 0x8b, 0x9c, 0xdc, 0x63, 0x90, 0xd3, 0xb9,
	0xc8, 0xfb, 0x29, 0xc2, 0x87, 0x43, 0x27, 0x78, 0x4c, 0x2f, 0x04, 0x49, 0xcf, 0xcf, 0xde, 0x67,
	0xcf, 0x4b, 0x20, 0xec, 0x82, 0x46, 0x72, 0x1c, 0x1f, 0x30, 0xed, 0xb2, 0x55, 0xab, 0x50, 0x5d,
	0x64, 0x2a, 0x9e, 0xc6, 0x60, 0x1f, 0x1e, 0x84, 0x8a, 0x25, 0xc7, 0xb1, 0x16, 0x0c, 0x66, 0x28,
	0x3f, 0x42, 0x78, 0x4c, 0x8e, 0x16, 0xd8, 0xfe, 0x14, 0xee, 0x85, 0xb4, 0xed, 0x03, 0xc5, 0x85,
	0x18, 0xc5, 0xd0, 0x40, 0x13, 0x29, 0x1d, 0xe8, 0x6d, 0xb4, 0xe8, 0x1c, 0xab, 0xdf, 0x44, 0x78,
	0xa6, 0xe5, 0x2e, 0x35, 0x5f, 0x3f, 0x17, 0xd0, 0xf8, 0x7f, 0xe3, 0x59, 0xf9, 0x03, 0xc2, 0xa5,
	0x76, 0x31, 0x01, 0x9b, 0xaf, 0xe1, 0x81, 0x48, 0xec, 0xfa, 0x3b, 0xde, 0x36, 0xfb, 0xb7, 0x03,
	0xb7, 0x83, 0xe4, 0xbe, 0x17, 0x09, 0x82, 0xab, 0x66, 0x79, 0xed, 0xf5, 0xf0, 0xe4, 0xf2, 0x49,
	0xd8, 0x14, 0x7e, 0x81, 0xf0, 0x91, 0x14, 0x70, 0x40, 0xea, 0x05, 0xbc, 0x3f, 0x7e, 0xe0, 0x92,
	0x06, 0x6a, 0xac, 0x2d, 0xd0, 0xb9, 0x8f, 0x45, 0x0b, 0x3b, 0x47, 0xe8, 0xfb, 0x08, 0x4f, 0x87,
	0xbb, 0xfc, 0xa2, 0x6d, 0x94, 0x99, 0x79, 0x9b, 0x76, 0x74, 0xc7, 0x8d, 0x27, 0xa8, 0x5c, 0x73,
	0x82, 0xca, 0xcc, 0x42, 0xdf, 0x42, 0xf8, 0x58, 0x1b, 0x00, 0x81, 0x60, 0x8a, 0xc7, 0x4c, 0x30,
	0xd2, 0x1f, 0x37, 0x2f, 0x1d, 0x32, 0xd3, 0x86, 0x53, 0x3c, 0x20, 0xed, 0x9c, 0x65, 0x65, 0x92,
	0xd6, 0xa9, 0xd3, 0xcf, 0xdf, 0x43, 0x22, 0x5a, 0x0f, 0xda, 0x36, 0x11, 0xb9, 0x0e, 0x10, 0xd1,
	0xb9, 0x38, 0xbc, 0x1f, 0xc9, 0x45, 0x7c, 0xcb, 0xd7, 0xe0, 0xce, 0xf2, 0x49, 0x58, 0xd7, 0x3f,
	0x8b, 0x6c, 0x3a, 0x71, 0x6c, 0x40, 0xf6, 0x02, 0xde, 0x17, 0xbb, 0x68, 0x01, 0xbb, 0x87, 0xe2,
	0x77, 0x9e, 0x48, 0x4b, 0x20, 0x76, 0xc0, 0x8d, 0x94, 0x75, 0x8e, 0xcb, 0xb7, 0x43, 0x2e, 0x2f,
	0x50, 0xd6, 0x29, 0x2e, 0x33, 0x96, 0xf1, 0x10, 0xce, 0xdd, 0xa4, 0x54, 0x2c, 0xdf, 0x6e, 0x8d,
	0xff, 0x54, 0x2a, 0xc0, 0x59, 0x02, 0x43, 0x3a, 0x67, 0x68, 0xc7, 0x9c, 0x29, 0x3f, 0xc9, 0xc1,
	0x41, 0xf1, 0x55, 0x9f, 0x99, 0x55, 0x83, 0xd1, 0x4b, 0x35, 0x8b, 0x99, 0x17, 0x1d, 0xf7, 0xca,
	0xba, 0xe1, 0x46, 0xf2, 0x6b, 0xd9, 0xa3, 0x06, 0x73, 0xbc, 0x30, 0xbf, 0xc2, 0x27, 0x29, 0xe0,
	0x5e, 0x8f, 0x96, 0xa9, 0x79, 0x9b, 0x7a, 0xe0, 0x70, 0xe3, 0x9b, 0xcc, 0xe1, 0x1e, 0xcf, 0xa9,
	0x31, 0x71, 0x31, 0x4c, 0xee, 0xd1, 0xe1, 0x38, 0x1a, 0x37, 0xd1, 0xc0, 0x92, 0x7c, 0x09, 0xf7,
	0x19, 0x55, 0xa7, 0x66, 0x33, 0xce, 0xa0, 0xd8, 0xcb, 0xe6, 0x3f, 0xcd, 0xef, 0xb8, 0xad, 0x2e,
	0x63, 0xdb, 0x2d, 0xb6, 0x36, 0x8b, 0x43, 0xc1, 0x15, 0xac, 0x51, 0xa4, 0x68, 0xbd, 0xc1, 0xef,
	0x45, 0x9b, 0x7c, 0x07, 0xe1, 0x21, 0xba, 0x61, 0x32, 0x58, 0xcf, 0xae, 0x67, 0x96, 0x69, 0xfe,
	0x09, 0x31, 0xc8, 0x1a, 0x0c, 0xf2, 0xfc, 0x8a, 0xc9, 0x56, 0x6b, 0xcb, 0xa5, 0xb2, 0x53, 0x55,
	0x01, 0xed, 0x8c, 0xe3, 0xad, 0x84, 0xbf, 0xd5, 0xdb, 0xcf, 0xab, 0x35, 0x66, 0x5a, 0x7e, 0x30,
	0xfe, 0x92, 0x47, 0xcb, 0x0b, 0xb4, 0xfc, 0x68, 0xb3, 0x98, 0xe8, 0x77, 0x6b, 0xb3, 0x38, 0x1a,
	0x40, 0x69, 0xae, 0x51, 0xb4, 0xfd, 0xbc, 0x48, 0x6c, 0x05, 0x4b, 0xbc, 0x80, 0x3c, 0x83, 0x07,
	0x5d, 0x1e, 0x1a, 0xcb, 0xd4, 0x67, 0xba, 0x20, 0x22, 0xdf, 0x23, 0x8e, 0x70, 0xfb, 0x78, 0xf1,
	0x3c, 0x5f, 0x4d, 0xbc, 0x90, 0x5f, 0x74, 0x26, 0x5b, 0xcc, 0x15, 0xc4, 0xc5, 0x2d, 0xdc, 0x5b,
	0x76, 0x4c, 0x5b, 0x77, 0x6a, 0xac, 0x11, 0x12, 0xd1, 0x35, 0x10, 0x46, 0xff, 0x2b, 0x8e, 0x69,
	0xcf, 0x9f, 0x05, 0xbf, 0xa7, 0x22, 0x7e, 0x83, 0x76, 0x14, 0xfc, 0x99, 0xf1, 0x2b, 0x6b, 0x2a,
	0xab, 0xbb, 0xd4, 0x17, 0x0d, 0x1e, 0x6d, 0x16, 0x1b, 0xbd, 0x6b, 0x7b, 0xf9, 0xaf, 0xcb, 0x35,
	0xa6, 0xbc, 0xd7, 0x8d, 0x9f, 0x8a, 0x01, 0x5b, 0xb2, 0x8c, 0x72, 0x64, 0xb3, 0x7b, 0xbc, 0x38,
	0x6a, 0x71, 0x05, 0x3b, 0x8c, 0xfb, 0x82, 0x2a, 0xee, 0x6c, 0x90, 0xfa, 0x02, 0xdb, 0xcb, 0x35,
	0x46, 0x4a, 0x78, 0x64, 0x7b, 0xc5, 0xe9, 0xa6, 0xad, 0x33, 0x47, 0xd8, 0x3d, 0x21, 0xd6, 0xde,
	0x50, 0x63, 0xed, 0x2d, 0xda, 0x57, 0x1d, 0x6e, 0x1f, 0x8b, 0xbd, 0x9e, 0x0e, 0xc7, 0xde, 0x19,
	0x8c, 0x21, 0x7f, 0xd4, 0x5d, 0x9a, 0xdf, 0x3b, 0x81, 0xa6, 0xf7, 0xcf, 0x1d, 0x4e, 0x4b, 0x1e,
	0x75, 0x97, 0x6a, 0x7d, 0x4e, 0xf8, 0x93, 0x5c, 0xc2, 0x83, 0x74, 0xc3, 0x35, 0x3d, 0xb1, 0x39,
	0xe9, 0xcc, 0xac, 0xd2, 0x7c, 0xaf, 0x98, 0xd8, 0x42, 0x29, 0xd0, 0xe4, 0x4a, 0xa1, 0x26, 0x57,
	0xba, 0x1a, 0x6a, 0x72, 0xf3, 0xbd, 0x7c, 0xb1, 0xdf, 0xfb, 0x47, 0x11, 0xf1, 0x70, 0x0b, 0x1b,
	0xf3, 0x6a, 0x52, 0xc5, 0xfb, 0xaa, 0xc6, 0xc6, 0xb9, 0x00, 0x25, 0x27, 0xa4, 0x4f, 0xf8, 0x7a,
	0x31, 0x4b, 0xf4, 0xd8, 0x5f, 0x35, 0x36, 0x74, 0xa3, 0xd1, 0x6c, 0x6b, 0xb3, 0x78, 0x30, 0x70,
	0x38, 0x5e, 0xae, 0x68, 0x03, 0x8d, 0xee, 0x79, 0x70, 0xfc, 0x27, 0x07, 0x2a, 0x47, 0x6a, 0x70,
	0x40, 0xe0, 0x7e, 0x0f, 0xe1, 0x7d, 0xcc, 0x61, 0x86, 0xc5, 0xe7, 0x8a, 0x87, 0x56, 0x76, 0xf8,
	0x5e, 0xdb, 0x79, 0xf8, 0xc6, 0x87, 0xd8, 0xda, 0x2c, 0x8e, 0x04, 0x4e, 0xc4, 0x8a, 0x15, 0xad,
	0x5f, 0x7c, 0x2f, 0xda, 0xbc, 0x15, 0x79, 0x17, 0xe1, 0x01, 0x7f, 0xdd, 0x70, 0x1b, 0xc0, 0xba,
	0xb2, 0x80, 0xbd, 0xb1, 0x73, 0x60, 0xb1, 0x11, 0xb6, 0x36, 0x8b, 0xc3, 0x01, 0xae, 0x68, 0xa9,
	0xa2, 0x61, 0xfe, 0x09, 0xa8, 0x38, 0x5f, 0xa2, 0xd6, 0xa9, 0xb1, 0x00, 0x56, 0xee, 0x7f, 0xc1,
	0x57, 0x6c, 0x88, 0x6d, 0xbe, 0x62, 0xc5, 0x8a, 0xd6, 0xcf, 0xbf, 0x2f, 0xd7, 0x18, 0x6f, 0xa5,
	0xbc, 0x85, 0x87, 0x02, 0x49, 0x53, 0x64, 0x9a, 0xc7, 0x13, 0x60, 0x20, 0x31, 0xe6, 0xb6, 0x13,
	0xa3, 0x8a, 0x47, 0x1a, 0xbd, 0xcf, 0xd7, 0x17, 0x17, 0xa2, 0x23, 0xf0, 0x84, 0x08, 0x23, 0x74,
	0x6b, 0x3d, 0xfc, 0x73, 0xb1, 0xa2, 0x7c, 0x16, 0x1f, 0x88, 0xc0, 0x81, 0x68, 0x7b, 0x16, 0x77,
	0xf3, 0x6a, 0x88, 0xb1, 0x03, 0x89, 0xac, 0x09, 0xd9, 0x52, 0x18, 0x29, 0x33, 0xf1, 0xf3, 0xc0,
	0x25, 0x10, 0x8c, 0xc3, 0x91, 0xf7, 0xe3, 0xae, 0xc6, 0xa0, 0x5d, 0x66, 0xa5, 0x39, 0x75, 0x6f,
	0x9b, 0x6f, 0xa7, 0xee, 0xa5, 0xa8, 0xf0, 0x9c, 0x9a, 0xba, 0xc3, 0x96, 0x20, 0xf4, 0x0e, 0x44,
	0xcb, 0x14, 0x1a, 0x3f, 0xf0, 0x35, 0x83, 0xea, 0xd4, 0xb1, 0xb9, 0xf9, 0xf0, 0x26, 0xf3, 0xc6,
	0x6d, 0xf2, 0x26, 0xd7, 0x96, 0x37, 0x6e, 0xa4, 0xac, 0x73, 0x87, 0xb7, 0x8b, 0x40, 0xcb, 0x15,
	0xb3, 0x5a, 0xb3, 0x0c, 0x46, 0x1b, 0xaa, 0x45, 0x40, 0xcb, 0x31, 0x9c, 0xab, 0xfa, 0x2b, 0xc0,
	0xc7, 0x68, 0xfc, 0x48, 0xe2, 0xaf, 0x84, 0xc6, 0xdc, 0x46, 0xb9, 0x02, 0x8e, 0x27, 0x7a, 0x02,
	0xc7, 0x9f, 0xc3, 0xdd, 0x1e, 0xf5, 0x5d, 0xe8, 0xab, 0x98, 0xd6, 0x57, 0x08, 0x52, 0x18, 0x2b,
	0x9f, 0xc7, 0xe3, 0xb1, 0x4e, 0x1b, 0x4a, 0x79, 0x63, 0xa5, 0x9c, 0x88, 0x22, 0x2c, 0x34, 0xf7,
	0x1a, 0xb1, 0x17, 0x20, 0xaf, 0xe3, 0x62, 0x6a, 0x7f, 0x80, 0xf3, 0x54, 0x0c, 0xa7, 0xd2, 0xa2,
	0xc7, 0x38, 0xd4, 0x6b, 0x90, 0xd5, 0xc3, 0xae, 0x53, 0xb2, 0xfa, 0x6c, 0x14, 0x6f, 0x82, 0x85,
	0xe6, 0x46, 0x02, 0x74, 0x19, 0x52, 0x42, 0x6a, 0xcf, 0x80, 0xfc, 0x6c, 0x0c, 0xf9, 0x54, 0x56,
	0xdf, 0x71, 0xf8, 0x5f, 0xc1, 0x27, 0xa4, 0xcc, 0x9c, 0x37, 0x2d, 0x8b, 0x56, 0x92, 0x7e, 0x9c,
	0x89, 0xfa, 0x31, 0x9d, 0xc6, 0x52, 0xa2, 0xb5, 0x70, 0xa8, 0x06, 0x92, 0x55, 0xf6, 0x58, 0x8d,
	0x45, 0x13, 0xf5, 0xec, 0x64, 0xdb, 0xa3, 0xc5, 0x5d, 0xbc, 0xd1, 0xc4, 0xe3, 0x2b, 0x86, 0x5d,
	0xa6, 0x56, 0xd2, 0xb5, 0xb9, 0xa8, 0x6b, 0x13, 0xcd, 0x83, 0x25, 0x5a, 0x09, 0x97, 0x28, 0xbc,
	0x15, 0xa4, 0xf7, 0xdd, 0x90, 0x0d, 0xa3, 0xae, 0x4c, 0x67, 0xf6, 0x1e, 0x77, 0x41, 0x83, 0xfb,
	0x47, 0x38, 0x8c, 0xec, 0xfe, 0x51, 0x8a, 0xc2, 0x1f, 0x6b, 0x1e, 0x20, 0xd6, 0x42, 0x40, 0xff,
	0x32, 0x9c, 0x93, 0xe5, 0x7d, 0x02, 0xec, 0xd3, 0x31, 0xd8, 0x4f, 0xb7, 0xec, 0x35, 0x06, 0x79,
	0xee, 0x9d, 0x49, 0xfc, 0x84, 0xe8, 0x9f, 0xac, 0xe2, 0x9e, 0xe0, 0x25, 0x8e, 0xc4, 0xe3, 0x3e,
	0xf9, 0xcc, 0x57, 0x98, 0x48, 0x37, 0x08, 0x3a, 0x57, 0x0e, 0xbf, 0xfd, 0xf1, 0xbf, 0xde, 0xed,
	0x3a, 0x48, 0x86, 0xd5, 0xe4, 0x9b, 0x26, 0xf9, 0x3d, 0xc2, 0x07, 0xa5, 0x6a, 0x21, 0x99, 0x4d,
	0x76, 0x9c, 0xf1, 0xfe, 0x57, 0x98, 0xdb, 0x49, 0x13, 0x40, 0xf7, 0xaa, 0x40, 0xf7, 0x19, 0xf2,
	0xb2, 0xda, 0xce, 0xeb, 0xac, 0x7a, 0x07, 0x14, 0xd8, 0xbb, 0xea, 0x9d, 0x88, 0x3c, 0x75, 0x97,
	0xfc, 0x1c, 0xe1, 0xbc, 0x74, 0xa0, 0x73, 0x96, 0x25, 0x73, 0x25, 0xe3, 0x69, 0x4c, 0xe6, 0x4a,
	0xd6, 0xe3, 0x96, 0x32, 0x23, 0x5c, 0x99, 0x22, 0x47, 0xdb, 0x72, 0x85, 0xfc, 0x19, 0xe1, 0xc9,
	0x34, 0xc8, 0x0d, 0xd9, 0x97, 0x9c, 0x69, 0x1f, 0x48, 0xb3, 0x7e, 0x5d, 0x38, 0xbb, 0xab, 0xb6,
	0xe0, 0xcd, 0x49, 0xe1, 0xcd, 0x71, 0x32, 0x1d, 0xf3, 0x46, 0x4c, 0x42, 0x54, 0x7f, 0xde, 0x9e,
	0x11, 0xf2, 0x27, 0x84, 0x0f, 0x24, 0x95, 0xa8, 0x99, 0xf6, 0x82, 0x22, 0xc4, 0x5c, 0x6a, 0xd7,
	0x1c, 0x60, 0x5e, 0x13, 0x30, 0x35, 0xb2, 0x94, 0x45, 0xba, 0x7a, 0x07, 0xce, 0x89, 0x3c, 0x74,
	0xe0, 0xde, 0xc7, 0x7f, 0x36, 0xce, 0x88, 0xcd, 0x21, 0xf5, 0x6b, 0x84, 0x47, 0x12, 0xe3, 0xf2,
	0x70, 0x9a, 0x69, 0x8f, 0xd6, 0x16, 0x1e, 0xb5, 0x7a, 0x9c, 0x52, 0x5e, 0x16, 0x1e, 0xbd, 0x48,
	0x5e, 0xd8, 0x95, 0x47, 0xe4, 0xdb, 0x08, 0x0f, 0x46, 0x9f, 0x61, 0x38, 0xe2, 0x69, 0x29, 0x04,
	0xc9, 0xd3, 0x52, 0xe1, 0x58, 0x1b, 0x96, 0x80, 0xf3, 0x84, 0xc0, 0xf9, 0x0c, 0x79, 0x3a, 0x19,
	0x20, 0xe1, 0xe3, 0x4d, 0x24, 0x38, 0x7e, 0x88, 0xf0, 0x50, 0x4c, 0x3f, 0xe7, 0xb8, 0xe4, 0xa3,
	0xc9, 0xde, 0x0f, 0x0a, 0xc7, 0xdb, 0x31, 0x05, 0x64, 0xa7, 0x05, 0xb2, 0x39, 0x72, 0x52, 0x4d,
	0xff, 0x8f, 0x0a, 0x39, 0x79, 0x7f, 0xec, 0xc2, 0x87, 0x52, 0x35, 0x5c, 0xf2, 0x82, 0x34, 0x36,
	0xb3, 0x84, 0xe6, 0xc2, 0xa9, 0x9d, 0x36, 0x03, 0x37, 0x7e, 0x8b, 0x84, 0x1f, 0xbf, 0x41, 0x37,
	0xae, 0x93, 0x37, 0x63, 0xae, 0xdc, 0x14, 0xe9, 0x5b, 0xef, 0x44, 0x94, 0x5f, 0x8f, 0x75, 0xdc,
	0x4a, 0x9a, 0xde, 0x71, 0xd7, 0xff, 0x46, 0x78, 0x2c, 0xd5, 0x4b, 0x3e, 0xfd, 0x2f, 0x48, 0xe7,
	0x74, 0x37, 0x7c, 0xb6, 0x23, 0xbd, 0x2b, 0x6f, 0x09, 0x3a, 0xdf, 0xb8, 0x71, 0x8c, 0x4c, 0xb5,
	0xc9, 0x26, 0x39, 0xd6, 0x36, 0x3b, 0xe4, 0x07, 0x08, 0x0f, 0x46, 0x65, 0xd1, 0xf4, 0x75, 0x27,
	0x91, 0x7e, 0x53, 0xd6, 0x9d, 0x4c, 0xa0, 0x55, 0x5e, 0x14, 0x6e, 0xcc, 0x12, 0x55, 0x4d, 0xfd,
	0x87, 0x22, 0x79, 0x70, 0x7f, 0x80, 0xf0, 0x40, 0xb4, 0x47, 0x19, 0x3c, 0xb9, 0x32, 0x2d, 0x83,
	0x97, 0xa2, 0x1f, 0x2b, 0x9f, 0x13, 0xf0, 0x16, 0xc8, 0xfc, 0x0e, 0xe1, 0x35, 0x45, 0xd2, 0x4d,
	0x4a, 0xef, 0x92, 0x1f, 0x23, 0x3c, 0x22, 0x13, 0x25, 0x65, 0x5b, 0x70, 0x0b, 0xa1, 0x59, 0xb6,
	0x05, 0xb7, 0xd2, 0x3a, 0x15, 0x55, 0xba, 0xb5, 0x51, 0x68, 0xa2, 0x57, 0x79, 0x1b, 0x7d, 0xd5,
	0x71, 0x75, 0x7f, 0xdd, 0x70, 0xbf, 0xda, 0x85, 0xc8, 0x2f, 0x11, 0x1e, 0x4d, 0xd1, 0xa1, 0xc8,
	0xc9, 0xf4, 0xc1, 0xe5, 0x37, 0x9f, 0xc2, 0xec, 0x0e, 0x5a, 0x00, 0xe2, 0x39, 0x81, 0xb8, 0x39,
	0xb2, 0x1b, 0x88, 0x5d, 0xde, 0x2c, 0x1a, 0xb6, 0x1c, 0xf4, 0x5d, 0xdc, 0xcd, 0x67, 0x90, 0x1c,
	0x91, 0x1c, 0x21, 0xb7, 0x15, 0x96, 0xc2, 0x78, 0x5a, 0x35, 0x0c, 0x7d, 0x4a, 0x0c, 0x7d, 0x92,
	0x94, 0x12, 0x13, 0x1e, 0x9b, 0xe7, 0xc4, 0xe4, 0x7a, 0xb8, 0x37, 0x94, 0x5a, 0xc8, 0xa4, 0x7c,
	0x8c, 0x88, 0x0c, 0x93, 0x09, 0xe3, 0x29, 0x01, 0xe3, 0x08, 0x39, 0x2c, 0x83, 0x11, 0xe8, 0x37,
	0x77, 0xc9, 0xd7, 0x61, 0x09, 0x34, 0xe4, 0x81, 0xf4, 0x25, 0xd0, 0xa4, 0x7b, 0xb4, 0x58, 0x02,
	0xcd, 0xca, 0x85, 0x32, 0x25, 0xa0, 0x4c, 0x92, 0xa2, 0x9a, 0xfa, 0x3f, 0x81, 0xea, 0x1d, 0x0e,
	0xe7, 0x6b, 0xb0, 0x67, 0x84, 0x3d, 0xb4, 0xde, 0x33, 0xda, 0x40, 0x94, 0xa2, 0xa5, 0x28, 0x8a,
	0x40, 0x34, 0x46, 0x0a, 0xe9, 0x88, 0xc8, 0x37, 0x10, 0x1e, 0x6c, 0x92, 0x24, 0x64, 0x60, 0xe4,
	0xfa, 0x87, 0x0c, 0x4c, 0x8a, 0xbe, 0xa1, 0x1c, 0x15, 0x60, 0x8a, 0xe4, 0x48, 0x0c, 0x8c, 0x0f,
	0xd6, 0x3a, 0x1c, 0x1e, 0xc8, 0x7d, 0x84, 0x49, 0x52, 0x7d, 0x20, 0xcf, 0xa6, 0x0f, 0x94, 0xd0,
	0x3c, 0x0a, 0x27, 0xda, 0x33, 0x06, 0x60, 0xd3, 0x02, 0x98, 0x42, 0x26, 0xe4, 0xc0, 0xd6, 0xb7,
	0x41, 0x7c, 0x80, 0xf0, 0x68, 0x8a, 0xc8, 0x20, 0x5b, 0xef, 0xad, 0x95, 0x0e, 0xd9, 0x7a, 0xcf,
	0x50, 0x30, 0x60, 0x87, 0x6a, 0x5e, 0xef, 0x0d, 0xa8, 0x89, 0xf5, 0x4e, 0xfe, 0x82, 0xf0, 0x44,
	0x96, 0x8a, 0x40, 0x5e, 0xca, 0xa6, 0x2b, 0x45, 0xe5, 0x28, 0x9c, 0xd9, 0x4d, 0x53, 0x70, 0xe6,
	0x25, 0xe1, 0xcc, 0x73, 0x64, 0xb6, 0x35, 0xef, 0x7a, 0x32, 0x51, 0x93, 0x5f, 0x21, 0x9c, 0x4f,
	0x53, 0x12, 0x48, 0x0b, 0x5e, 0x53, 0x14, 0x0d, 0xd9, 0xbd, 0x2f, 0x4b, 0xa8, 0x48, 0xb9, 0x29,
	0x35, 0xe0, 0x97, 0x45, 0xbb, 0x18, 0xea, 0xfb, 0x08, 0x8f, 0xc8, 0x44, 0x04, 0x59, 0x5e, 0x6b,
	0x21, 0x60, 0xc8, 0xf2, 0x5a, 0x2b, 0x6d, 0xa2, 0x9d, 0x6d, 0x60, 0xfe, 0xc2, 0x87, 0x0f, 0xc6,
	0xd1, 0x47, 0x0f, 0xc6, 0xd1, 0x3f, 0x1f, 0x8c, 0xa3, 0x7b, 0x0f, 0xc7, 0xf7, 0x7c, 0xf4, 0x70,
	0x7c, 0xcf, 0x5f, 0x1f, 0x8e, 0xef, 0xb9, 0x31, 0x93, 0xfd, 0x88, 0xb9, 0x11, 0x9c, 0xb4, 0xeb,
	0x2e, 0xf5, 0x97, 0x7b, 0xc4, 0xeb, 0xd1, 0x73, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x3f,
	0x8b, 0x0e, 0x87, 0x2e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a LimitOrderTrancheUser by index.
	LimitOrderTrancheUser(ctx context.Context, in *QueryGetLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheUserResponse, error)
	// Queries a list of LimitOrderTranchUser items.
	LimitOrderTrancheUserAll(ctx context.Context, in *QueryAllLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheUserResponse, error)
	// Queries a list of LimitOrderTrancheUser items for a given address.
	LimitOrderTrancheUserAllByAddress(ctx context.Context, in *QueryAllLimitOrderTrancheUserByAddressRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheUserByAddressResponse, error)
	// Queries a LimitOrderTranche by index.
	LimitOrderTranche(ctx context.Context, in *QueryGetLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheResponse, error)
	// Queries a list of LimitOrderTranche items for a given pairID / TokenIn
	// combination.
	LimitOrderTrancheAll(ctx context.Context, in *QueryAllLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheResponse, error)
	// Queries a list of UserDeposits items.
	UserDepositsAll(ctx context.Context, in *QueryAllUserDepositsRequest, opts ...grpc.CallOption) (*QueryAllUserDepositsResponse, error)
	// Queries a list of TickLiquidity items.
	TickLiquidityAll(ctx context.Context, in *QueryAllTickLiquidityRequest, opts ...grpc.CallOption) (*QueryAllTickLiquidityResponse, error)
	// Queries a InactiveLimitOrderTranche by index.
	InactiveLimitOrderTranche(ctx context.Context, in *QueryGetInactiveLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetInactiveLimitOrderTrancheResponse, error)
	// Queries a list of InactiveLimitOrderTranche items.
	InactiveLimitOrderTrancheAll(ctx context.Context, in *QueryAllInactiveLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllInactiveLimitOrderTrancheResponse, error)
	// Queries a list of PoolReserves items.
	PoolReservesAll(ctx context.Context, in *QueryAllPoolReservesRequest, opts ...grpc.CallOption) (*QueryAllPoolReservesResponse, error)
	// Queries a PoolReserve by index
	PoolReserves(ctx context.Context, in *QueryGetPoolReservesRequest, opts ...grpc.CallOption) (*QueryGetPoolReservesResponse, error)
	// DEPRECATED Queries the simulated result of a multihop swap
	EstimateMultiHopSwap(ctx context.Context, in *QueryEstimateMultiHopSwapRequest, opts ...grpc.CallOption) (*QueryEstimateMultiHopSwapResponse, error)
	// DEPRECATED Queries the simulated result of a PlaceLimit order
	EstimatePlaceLimitOrder(ctx context.Context, in *QueryEstimatePlaceLimitOrderRequest, opts ...grpc.CallOption) (*QueryEstimatePlaceLimitOrderResponse, error)
	// Queries a pool by pair, tick and fee
	Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	// Queries a pool by ID
	PoolByID(ctx context.Context, in *QueryPoolByIDRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error)
	// Queries a PoolMetadata by ID
	PoolMetadata(ctx context.Context, in *QueryGetPoolMetadataRequest, opts ...grpc.CallOption) (*QueryGetPoolMetadataResponse, error)
	// Queries a list of PoolMetadata items.
	PoolMetadataAll(ctx context.Context, in *QueryAllPoolMetadataRequest, opts ...grpc.CallOption) (*QueryAllPoolMetadataResponse, error)
	// Simulates MsgDeposit
	SimulateDeposit(ctx context.Context, in *QuerySimulateDepositRequest, opts ...grpc.CallOption) (*QuerySimulateDepositResponse, error)
	// Simulates MsgWithdrawal
	SimulateWithdrawal(ctx context.Context, in *QuerySimulateWithdrawalRequest, opts ...grpc.CallOption) (*QuerySimulateWithdrawalResponse, error)
	// Simulates MsgPlaceLimitOrder
	SimulatePlaceLimitOrder(ctx context.Context, in *QuerySimulatePlaceLimitOrderRequest, opts ...grpc.CallOption) (*QuerySimulatePlaceLimitOrderResponse, error)
	// Simulates MsgWithdrawFilledLimitOrder
	SimulateWithdrawFilledLimitOrder(ctx context.Context, in *QuerySimulateWithdrawFilledLimitOrderRequest, opts ...grpc.CallOption) (*QuerySimulateWithdrawFilledLimitOrderResponse, error)
	// Simulates MsgCancelLimitOrder
	SimulateCancelLimitOrder(ctx context.Context, in *QuerySimulateCancelLimitOrderRequest, opts ...grpc.CallOption) (*QuerySimulateCancelLimitOrderResponse, error)
	// Simulates MsgMultiHopSwap
	SimulateMultiHopSwap(ctx context.Context, in *QuerySimulateMultiHopSwapRequest, opts ...grpc.CallOption) (*QuerySimulateMultiHopSwapResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheUser(ctx context.Context, in *QueryGetLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheUserResponse, error) {
	out := new(QueryGetLimitOrderTrancheUserResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/LimitOrderTrancheUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheUserAll(ctx context.Context, in *QueryAllLimitOrderTrancheUserRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheUserResponse, error) {
	out := new(QueryAllLimitOrderTrancheUserResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/LimitOrderTrancheUserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheUserAllByAddress(ctx context.Context, in *QueryAllLimitOrderTrancheUserByAddressRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheUserByAddressResponse, error) {
	out := new(QueryAllLimitOrderTrancheUserByAddressResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/LimitOrderTrancheUserAllByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTranche(ctx context.Context, in *QueryGetLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetLimitOrderTrancheResponse, error) {
	out := new(QueryGetLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/LimitOrderTranche", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitOrderTrancheAll(ctx context.Context, in *QueryAllLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllLimitOrderTrancheResponse, error) {
	out := new(QueryAllLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/LimitOrderTrancheAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserDepositsAll(ctx context.Context, in *QueryAllUserDepositsRequest, opts ...grpc.CallOption) (*QueryAllUserDepositsResponse, error) {
	out := new(QueryAllUserDepositsResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/UserDepositsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TickLiquidityAll(ctx context.Context, in *QueryAllTickLiquidityRequest, opts ...grpc.CallOption) (*QueryAllTickLiquidityResponse, error) {
	out := new(QueryAllTickLiquidityResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/TickLiquidityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InactiveLimitOrderTranche(ctx context.Context, in *QueryGetInactiveLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryGetInactiveLimitOrderTrancheResponse, error) {
	out := new(QueryGetInactiveLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/InactiveLimitOrderTranche", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InactiveLimitOrderTrancheAll(ctx context.Context, in *QueryAllInactiveLimitOrderTrancheRequest, opts ...grpc.CallOption) (*QueryAllInactiveLimitOrderTrancheResponse, error) {
	out := new(QueryAllInactiveLimitOrderTrancheResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/InactiveLimitOrderTrancheAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolReservesAll(ctx context.Context, in *QueryAllPoolReservesRequest, opts ...grpc.CallOption) (*QueryAllPoolReservesResponse, error) {
	out := new(QueryAllPoolReservesResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/PoolReservesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolReserves(ctx context.Context, in *QueryGetPoolReservesRequest, opts ...grpc.CallOption) (*QueryGetPoolReservesResponse, error) {
	out := new(QueryGetPoolReservesResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/PoolReserves", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) EstimateMultiHopSwap(ctx context.Context, in *QueryEstimateMultiHopSwapRequest, opts ...grpc.CallOption) (*QueryEstimateMultiHopSwapResponse, error) {
	out := new(QueryEstimateMultiHopSwapResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/EstimateMultiHopSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *queryClient) EstimatePlaceLimitOrder(ctx context.Context, in *QueryEstimatePlaceLimitOrderRequest, opts ...grpc.CallOption) (*QueryEstimatePlaceLimitOrderResponse, error) {
	out := new(QueryEstimatePlaceLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/EstimatePlaceLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryPoolRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolByID(ctx context.Context, in *QueryPoolByIDRequest, opts ...grpc.CallOption) (*QueryPoolResponse, error) {
	out := new(QueryPoolResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/PoolByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolMetadata(ctx context.Context, in *QueryGetPoolMetadataRequest, opts ...grpc.CallOption) (*QueryGetPoolMetadataResponse, error) {
	out := new(QueryGetPoolMetadataResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/PoolMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolMetadataAll(ctx context.Context, in *QueryAllPoolMetadataRequest, opts ...grpc.CallOption) (*QueryAllPoolMetadataResponse, error) {
	out := new(QueryAllPoolMetadataResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/PoolMetadataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateDeposit(ctx context.Context, in *QuerySimulateDepositRequest, opts ...grpc.CallOption) (*QuerySimulateDepositResponse, error) {
	out := new(QuerySimulateDepositResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/SimulateDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateWithdrawal(ctx context.Context, in *QuerySimulateWithdrawalRequest, opts ...grpc.CallOption) (*QuerySimulateWithdrawalResponse, error) {
	out := new(QuerySimulateWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/SimulateWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulatePlaceLimitOrder(ctx context.Context, in *QuerySimulatePlaceLimitOrderRequest, opts ...grpc.CallOption) (*QuerySimulatePlaceLimitOrderResponse, error) {
	out := new(QuerySimulatePlaceLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/SimulatePlaceLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateWithdrawFilledLimitOrder(ctx context.Context, in *QuerySimulateWithdrawFilledLimitOrderRequest, opts ...grpc.CallOption) (*QuerySimulateWithdrawFilledLimitOrderResponse, error) {
	out := new(QuerySimulateWithdrawFilledLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/SimulateWithdrawFilledLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateCancelLimitOrder(ctx context.Context, in *QuerySimulateCancelLimitOrderRequest, opts ...grpc.CallOption) (*QuerySimulateCancelLimitOrderResponse, error) {
	out := new(QuerySimulateCancelLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/SimulateCancelLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SimulateMultiHopSwap(ctx context.Context, in *QuerySimulateMultiHopSwapRequest, opts ...grpc.CallOption) (*QuerySimulateMultiHopSwapResponse, error) {
	out := new(QuerySimulateMultiHopSwapResponse)
	err := c.cc.Invoke(ctx, "/neutron.dex.Query/SimulateMultiHopSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a LimitOrderTrancheUser by index.
	LimitOrderTrancheUser(context.Context, *QueryGetLimitOrderTrancheUserRequest) (*QueryGetLimitOrderTrancheUserResponse, error)
	// Queries a list of LimitOrderTranchUser items.
	LimitOrderTrancheUserAll(context.Context, *QueryAllLimitOrderTrancheUserRequest) (*QueryAllLimitOrderTrancheUserResponse, error)
	// Queries a list of LimitOrderTrancheUser items for a given address.
	LimitOrderTrancheUserAllByAddress(context.Context, *QueryAllLimitOrderTrancheUserByAddressRequest) (*QueryAllLimitOrderTrancheUserByAddressResponse, error)
	// Queries a LimitOrderTranche by index.
	LimitOrderTranche(context.Context, *QueryGetLimitOrderTrancheRequest) (*QueryGetLimitOrderTrancheResponse, error)
	// Queries a list of LimitOrderTranche items for a given pairID / TokenIn
	// combination.
	LimitOrderTrancheAll(context.Context, *QueryAllLimitOrderTrancheRequest) (*QueryAllLimitOrderTrancheResponse, error)
	// Queries a list of UserDeposits items.
	UserDepositsAll(context.Context, *QueryAllUserDepositsRequest) (*QueryAllUserDepositsResponse, error)
	// Queries a list of TickLiquidity items.
	TickLiquidityAll(context.Context, *QueryAllTickLiquidityRequest) (*QueryAllTickLiquidityResponse, error)
	// Queries a InactiveLimitOrderTranche by index.
	InactiveLimitOrderTranche(context.Context, *QueryGetInactiveLimitOrderTrancheRequest) (*QueryGetInactiveLimitOrderTrancheResponse, error)
	// Queries a list of InactiveLimitOrderTranche items.
	InactiveLimitOrderTrancheAll(context.Context, *QueryAllInactiveLimitOrderTrancheRequest) (*QueryAllInactiveLimitOrderTrancheResponse, error)
	// Queries a list of PoolReserves items.
	PoolReservesAll(context.Context, *QueryAllPoolReservesRequest) (*QueryAllPoolReservesResponse, error)
	// Queries a PoolReserve by index
	PoolReserves(context.Context, *QueryGetPoolReservesRequest) (*QueryGetPoolReservesResponse, error)
	// DEPRECATED Queries the simulated result of a multihop swap
	EstimateMultiHopSwap(context.Context, *QueryEstimateMultiHopSwapRequest) (*QueryEstimateMultiHopSwapResponse, error)
	// DEPRECATED Queries the simulated result of a PlaceLimit order
	EstimatePlaceLimitOrder(context.Context, *QueryEstimatePlaceLimitOrderRequest) (*QueryEstimatePlaceLimitOrderResponse, error)
	// Queries a pool by pair, tick and fee
	Pool(context.Context, *QueryPoolRequest) (*QueryPoolResponse, error)
	// Queries a pool by ID
	PoolByID(context.Context, *QueryPoolByIDRequest) (*QueryPoolResponse, error)
	// Queries a PoolMetadata by ID
	PoolMetadata(context.Context, *QueryGetPoolMetadataRequest) (*QueryGetPoolMetadataResponse, error)
	// Queries a list of PoolMetadata items.
	PoolMetadataAll(context.Context, *QueryAllPoolMetadataRequest) (*QueryAllPoolMetadataResponse, error)
	// Simulates MsgDeposit
	SimulateDeposit(context.Context, *QuerySimulateDepositRequest) (*QuerySimulateDepositResponse, error)
	// Simulates MsgWithdrawal
	SimulateWithdrawal(context.Context, *QuerySimulateWithdrawalRequest) (*QuerySimulateWithdrawalResponse, error)
	// Simulates MsgPlaceLimitOrder
	SimulatePlaceLimitOrder(context.Context, *QuerySimulatePlaceLimitOrderRequest) (*QuerySimulatePlaceLimitOrderResponse, error)
	// Simulates MsgWithdrawFilledLimitOrder
	SimulateWithdrawFilledLimitOrder(context.Context, *QuerySimulateWithdrawFilledLimitOrderRequest) (*QuerySimulateWithdrawFilledLimitOrderResponse, error)
	// Simulates MsgCancelLimitOrder
	SimulateCancelLimitOrder(context.Context, *QuerySimulateCancelLimitOrderRequest) (*QuerySimulateCancelLimitOrderResponse, error)
	// Simulates MsgMultiHopSwap
	SimulateMultiHopSwap(context.Context, *QuerySimulateMultiHopSwapRequest) (*QuerySimulateMultiHopSwapResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheUser(ctx context.Context, req *QueryGetLimitOrderTrancheUserRequest) (*QueryGetLimitOrderTrancheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheUser not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheUserAll(ctx context.Context, req *QueryAllLimitOrderTrancheUserRequest) (*QueryAllLimitOrderTrancheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheUserAll not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheUserAllByAddress(ctx context.Context, req *QueryAllLimitOrderTrancheUserByAddressRequest) (*QueryAllLimitOrderTrancheUserByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheUserAllByAddress not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTranche(ctx context.Context, req *QueryGetLimitOrderTrancheRequest) (*QueryGetLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTranche not implemented")
}
func (*UnimplementedQueryServer) LimitOrderTrancheAll(ctx context.Context, req *QueryAllLimitOrderTrancheRequest) (*QueryAllLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitOrderTrancheAll not implemented")
}
func (*UnimplementedQueryServer) UserDepositsAll(ctx context.Context, req *QueryAllUserDepositsRequest) (*QueryAllUserDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDepositsAll not implemented")
}
func (*UnimplementedQueryServer) TickLiquidityAll(ctx context.Context, req *QueryAllTickLiquidityRequest) (*QueryAllTickLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickLiquidityAll not implemented")
}
func (*UnimplementedQueryServer) InactiveLimitOrderTranche(ctx context.Context, req *QueryGetInactiveLimitOrderTrancheRequest) (*QueryGetInactiveLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InactiveLimitOrderTranche not implemented")
}
func (*UnimplementedQueryServer) InactiveLimitOrderTrancheAll(ctx context.Context, req *QueryAllInactiveLimitOrderTrancheRequest) (*QueryAllInactiveLimitOrderTrancheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InactiveLimitOrderTrancheAll not implemented")
}
func (*UnimplementedQueryServer) PoolReservesAll(ctx context.Context, req *QueryAllPoolReservesRequest) (*QueryAllPoolReservesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolReservesAll not implemented")
}
func (*UnimplementedQueryServer) PoolReserves(ctx context.Context, req *QueryGetPoolReservesRequest) (*QueryGetPoolReservesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolReserves not implemented")
}
func (*UnimplementedQueryServer) EstimateMultiHopSwap(ctx context.Context, req *QueryEstimateMultiHopSwapRequest) (*QueryEstimateMultiHopSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMultiHopSwap not implemented")
}
func (*UnimplementedQueryServer) EstimatePlaceLimitOrder(ctx context.Context, req *QueryEstimatePlaceLimitOrderRequest) (*QueryEstimatePlaceLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimatePlaceLimitOrder not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *QueryPoolRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) PoolByID(ctx context.Context, req *QueryPoolByIDRequest) (*QueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolByID not implemented")
}
func (*UnimplementedQueryServer) PoolMetadata(ctx context.Context, req *QueryGetPoolMetadataRequest) (*QueryGetPoolMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolMetadata not implemented")
}
func (*UnimplementedQueryServer) PoolMetadataAll(ctx context.Context, req *QueryAllPoolMetadataRequest) (*QueryAllPoolMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolMetadataAll not implemented")
}
func (*UnimplementedQueryServer) SimulateDeposit(ctx context.Context, req *QuerySimulateDepositRequest) (*QuerySimulateDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateDeposit not implemented")
}
func (*UnimplementedQueryServer) SimulateWithdrawal(ctx context.Context, req *QuerySimulateWithdrawalRequest) (*QuerySimulateWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateWithdrawal not implemented")
}
func (*UnimplementedQueryServer) SimulatePlaceLimitOrder(ctx context.Context, req *QuerySimulatePlaceLimitOrderRequest) (*QuerySimulatePlaceLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulatePlaceLimitOrder not implemented")
}
func (*UnimplementedQueryServer) SimulateWithdrawFilledLimitOrder(ctx context.Context, req *QuerySimulateWithdrawFilledLimitOrderRequest) (*QuerySimulateWithdrawFilledLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateWithdrawFilledLimitOrder not implemented")
}
func (*UnimplementedQueryServer) SimulateCancelLimitOrder(ctx context.Context, req *QuerySimulateCancelLimitOrderRequest) (*QuerySimulateCancelLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateCancelLimitOrder not implemented")
}
func (*UnimplementedQueryServer) SimulateMultiHopSwap(ctx context.Context, req *QuerySimulateMultiHopSwapRequest) (*QuerySimulateMultiHopSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateMultiHopSwap not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderTrancheUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/LimitOrderTrancheUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheUser(ctx, req.(*QueryGetLimitOrderTrancheUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheUserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderTrancheUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheUserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/LimitOrderTrancheUserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheUserAll(ctx, req.(*QueryAllLimitOrderTrancheUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheUserAllByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderTrancheUserByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheUserAllByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/LimitOrderTrancheUserAllByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheUserAllByAddress(ctx, req.(*QueryAllLimitOrderTrancheUserByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTranche_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTranche(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/LimitOrderTranche",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTranche(ctx, req.(*QueryGetLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitOrderTrancheAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitOrderTrancheAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/LimitOrderTrancheAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitOrderTrancheAll(ctx, req.(*QueryAllLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserDepositsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserDepositsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/UserDepositsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserDepositsAll(ctx, req.(*QueryAllUserDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TickLiquidityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTickLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TickLiquidityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/TickLiquidityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TickLiquidityAll(ctx, req.(*QueryAllTickLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InactiveLimitOrderTranche_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInactiveLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InactiveLimitOrderTranche(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/InactiveLimitOrderTranche",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InactiveLimitOrderTranche(ctx, req.(*QueryGetInactiveLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InactiveLimitOrderTrancheAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInactiveLimitOrderTrancheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InactiveLimitOrderTrancheAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/InactiveLimitOrderTrancheAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InactiveLimitOrderTrancheAll(ctx, req.(*QueryAllInactiveLimitOrderTrancheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolReservesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolReservesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolReservesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/PoolReservesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolReservesAll(ctx, req.(*QueryAllPoolReservesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolReserves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolReservesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolReserves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/PoolReserves",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolReserves(ctx, req.(*QueryGetPoolReservesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateMultiHopSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimateMultiHopSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateMultiHopSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/EstimateMultiHopSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateMultiHopSwap(ctx, req.(*QueryEstimateMultiHopSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimatePlaceLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEstimatePlaceLimitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimatePlaceLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/EstimatePlaceLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimatePlaceLimitOrder(ctx, req.(*QueryEstimatePlaceLimitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/PoolByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolByID(ctx, req.(*QueryPoolByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/PoolMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolMetadata(ctx, req.(*QueryGetPoolMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolMetadataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolMetadataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/PoolMetadataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolMetadataAll(ctx, req.(*QueryAllPoolMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/SimulateDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateDeposit(ctx, req.(*QuerySimulateDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/SimulateWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateWithdrawal(ctx, req.(*QuerySimulateWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulatePlaceLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulatePlaceLimitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulatePlaceLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/SimulatePlaceLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulatePlaceLimitOrder(ctx, req.(*QuerySimulatePlaceLimitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateWithdrawFilledLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateWithdrawFilledLimitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateWithdrawFilledLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/SimulateWithdrawFilledLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateWithdrawFilledLimitOrder(ctx, req.(*QuerySimulateWithdrawFilledLimitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateCancelLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateCancelLimitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateCancelLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/SimulateCancelLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateCancelLimitOrder(ctx, req.(*QuerySimulateCancelLimitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SimulateMultiHopSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySimulateMultiHopSwapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SimulateMultiHopSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neutron.dex.Query/SimulateMultiHopSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SimulateMultiHopSwap(ctx, req.(*QuerySimulateMultiHopSwapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neutron.dex.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "LimitOrderTrancheUser",
			Handler:    _Query_LimitOrderTrancheUser_Handler,
		},
		{
			MethodName: "LimitOrderTrancheUserAll",
			Handler:    _Query_LimitOrderTrancheUserAll_Handler,
		},
		{
			MethodName: "LimitOrderTrancheUserAllByAddress",
			Handler:    _Query_LimitOrderTrancheUserAllByAddress_Handler,
		},
		{
			MethodName: "LimitOrderTranche",
			Handler:    _Query_LimitOrderTranche_Handler,
		},
		{
			MethodName: "LimitOrderTrancheAll",
			Handler:    _Query_LimitOrderTrancheAll_Handler,
		},
		{
			MethodName: "UserDepositsAll",
			Handler:    _Query_UserDepositsAll_Handler,
		},
		{
			MethodName: "TickLiquidityAll",
			Handler:    _Query_TickLiquidityAll_Handler,
		},
		{
			MethodName: "InactiveLimitOrderTranche",
			Handler:    _Query_InactiveLimitOrderTranche_Handler,
		},
		{
			MethodName: "InactiveLimitOrderTrancheAll",
			Handler:    _Query_InactiveLimitOrderTrancheAll_Handler,
		},
		{
			MethodName: "PoolReservesAll",
			Handler:    _Query_PoolReservesAll_Handler,
		},
		{
			MethodName: "PoolReserves",
			Handler:    _Query_PoolReserves_Handler,
		},
		{
			MethodName: "EstimateMultiHopSwap",
			Handler:    _Query_EstimateMultiHopSwap_Handler,
		},
		{
			MethodName: "EstimatePlaceLimitOrder",
			Handler:    _Query_EstimatePlaceLimitOrder_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "PoolByID",
			Handler:    _Query_PoolByID_Handler,
		},
		{
			MethodName: "PoolMetadata",
			Handler:    _Query_PoolMetadata_Handler,
		},
		{
			MethodName: "PoolMetadataAll",
			Handler:    _Query_PoolMetadataAll_Handler,
		},
		{
			MethodName: "SimulateDeposit",
			Handler:    _Query_SimulateDeposit_Handler,
		},
		{
			MethodName: "SimulateWithdrawal",
			Handler:    _Query_SimulateWithdrawal_Handler,
		},
		{
			MethodName: "SimulatePlaceLimitOrder",
			Handler:    _Query_SimulatePlaceLimitOrder_Handler,
		},
		{
			MethodName: "SimulateWithdrawFilledLimitOrder",
			Handler:    _Query_SimulateWithdrawFilledLimitOrder_Handler,
		},
		{
			MethodName: "SimulateCancelLimitOrder",
			Handler:    _Query_SimulateCancelLimitOrder_Handler,
		},
		{
			MethodName: "SimulateMultiHopSwap",
			Handler:    _Query_SimulateMultiHopSwap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neutron/dex/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CalcWithdrawableShares {
		i--
		if m.CalcWithdrawableShares {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.TrancheKey) > 0 {
		i -= len(m.TrancheKey)
		copy(dAtA[i:], m.TrancheKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrancheKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithdrawableShares != nil {
		{
			size := m.WithdrawableShares.Size()
			i -= size
			if _, err := m.WithdrawableShares.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.LimitOrderTrancheUser != nil {
		{
			size, err := m.LimitOrderTrancheUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheUserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheUserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderTrancheUser) > 0 {
		for iNdEx := len(m.LimitOrderTrancheUser) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderTrancheUser[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrancheKey) > 0 {
		i -= len(m.TrancheKey)
		copy(dAtA[i:], m.TrancheKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrancheKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LimitOrderTranche != nil {
		{
			size, err := m.LimitOrderTranche.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrderTranche) > 0 {
		for iNdEx := len(m.LimitOrderTranche) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderTranche[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludePoolData {
		i--
		if m.IncludePoolData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUserDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUserDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUserDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheUserByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheUserByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheUserByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLimitOrderTrancheUserByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLimitOrderTrancheUserByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLimitOrderTrancheUserByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LimitOrders) > 0 {
		for iNdEx := len(m.LimitOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTickLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTickLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTickLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTickLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TickLiquidity) > 0 {
		for iNdEx := len(m.TickLiquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TickLiquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInactiveLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInactiveLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInactiveLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TrancheKey) > 0 {
		i -= len(m.TrancheKey)
		copy(dAtA[i:], m.TrancheKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TrancheKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInactiveLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInactiveLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInactiveLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InactiveLimitOrderTranche != nil {
		{
			size, err := m.InactiveLimitOrderTranche.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInactiveLimitOrderTrancheRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInactiveLimitOrderTrancheRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInactiveLimitOrderTrancheRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInactiveLimitOrderTrancheResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInactiveLimitOrderTrancheResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInactiveLimitOrderTrancheResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InactiveLimitOrderTranche) > 0 {
		for iNdEx := len(m.InactiveLimitOrderTranche) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InactiveLimitOrderTranche[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolReservesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolReservesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolReservesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolReservesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolReservesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolReservesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolReserves) > 0 {
		for iNdEx := len(m.PoolReserves) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolReserves[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolReservesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolReservesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolReservesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x20
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolReservesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolReservesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolReservesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolReserves != nil {
		{
			size, err := m.PoolReserves.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateMultiHopSwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateMultiHopSwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateMultiHopSwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PickBestRoute {
		i--
		if m.PickBestRoute {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.ExitLimitPrice.Size()
		i -= size
		if _, err := m.ExitLimitPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimateMultiHopSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimateMultiHopSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimateMultiHopSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CoinOut.Size()
		i -= size
		if _, err := m.CoinOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEstimatePlaceLimitOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimatePlaceLimitOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimatePlaceLimitOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxAmountOut != nil {
		{
			size := m.MaxAmountOut.Size()
			i -= size
			if _, err := m.MaxAmountOut.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ExpirationTime != nil {
		n21, err21 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ExpirationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpirationTime):])
		if err21 != nil {
			return 0, err21
		}
		i -= n21
		i = encodeVarintQuery(dAtA, i, uint64(n21))
		i--
		dAtA[i] = 0x42
	}
	if m.OrderType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.TickIndexInToOut != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndexInToOut))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenOut) > 0 {
		i -= len(m.TokenOut)
		copy(dAtA[i:], m.TokenOut)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenOut)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEstimatePlaceLimitOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEstimatePlaceLimitOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEstimatePlaceLimitOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SwapOutCoin.Size()
		i -= size
		if _, err := m.SwapOutCoin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SwapInCoin.Size()
		i -= size
		if _, err := m.SwapInCoin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalInCoin.Size()
		i -= size
		if _, err := m.TotalInCoin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Fee))
		i--
		dAtA[i] = 0x18
	}
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PairId) > 0 {
		i -= len(m.PairId)
		copy(dAtA[i:], m.PairId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PairId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolMetadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPoolMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPoolMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPoolMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolMetadata) > 0 {
		for iNdEx := len(m.PoolMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateWithdrawalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateWithdrawalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateWithdrawalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulatePlaceLimitOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulatePlaceLimitOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulatePlaceLimitOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulatePlaceLimitOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulatePlaceLimitOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulatePlaceLimitOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateWithdrawFilledLimitOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateWithdrawFilledLimitOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateWithdrawFilledLimitOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateWithdrawFilledLimitOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateWithdrawFilledLimitOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateWithdrawFilledLimitOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateCancelLimitOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateCancelLimitOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateCancelLimitOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateCancelLimitOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateCancelLimitOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateCancelLimitOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateMultiHopSwapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateMultiHopSwapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateMultiHopSwapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySimulateMultiHopSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySimulateMultiHopSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySimulateMultiHopSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resp != nil {
		{
			size, err := m.Resp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLimitOrderTrancheUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TrancheKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CalcWithdrawableShares {
		n += 2
	}
	return n
}

func (m *QueryGetLimitOrderTrancheUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LimitOrderTrancheUser != nil {
		l = m.LimitOrderTrancheUser.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.WithdrawableShares != nil {
		l = m.WithdrawableShares.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderTrancheUser) > 0 {
		for _, e := range m.LimitOrderTrancheUser {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TrancheKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LimitOrderTranche != nil {
		l = m.LimitOrderTranche.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderTranche) > 0 {
		for _, e := range m.LimitOrderTranche {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUserDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IncludePoolData {
		n += 2
	}
	return n
}

func (m *QueryAllUserDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheUserByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLimitOrderTrancheUserByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrders) > 0 {
		for _, e := range m.LimitOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTickLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTickLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TickLiquidity) > 0 {
		for _, e := range m.TickLiquidity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInactiveLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	l = len(m.TrancheKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInactiveLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InactiveLimitOrderTranche != nil {
		l = m.InactiveLimitOrderTranche.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInactiveLimitOrderTrancheRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInactiveLimitOrderTrancheResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InactiveLimitOrderTranche) > 0 {
		for _, e := range m.InactiveLimitOrderTranche {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolReservesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolReservesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolReserves) > 0 {
		for _, e := range m.PoolReserves {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolReservesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	if m.Fee != 0 {
		n += 1 + sovQuery(uint64(m.Fee))
	}
	return n
}

func (m *QueryGetPoolReservesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolReserves != nil {
		l = m.PoolReserves.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimateMultiHopSwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExitLimitPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.PickBestRoute {
		n += 2
	}
	return n
}

func (m *QueryEstimateMultiHopSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CoinOut.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEstimatePlaceLimitOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenOut)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndexInToOut != 0 {
		n += 1 + sovQuery(uint64(m.TickIndexInToOut))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.OrderType != 0 {
		n += 1 + sovQuery(uint64(m.OrderType))
	}
	if m.ExpirationTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ExpirationTime)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.MaxAmountOut != nil {
		l = m.MaxAmountOut.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEstimatePlaceLimitOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalInCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.SwapInCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.SwapOutCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PairId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	if m.Fee != 0 {
		n += 1 + sovQuery(uint64(m.Fee))
	}
	return n
}

func (m *QueryPoolByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPoolMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPoolMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolMetadata.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPoolMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPoolMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolMetadata) > 0 {
		for _, e := range m.PoolMetadata {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateWithdrawalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulatePlaceLimitOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulatePlaceLimitOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateWithdrawFilledLimitOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateWithdrawFilledLimitOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateCancelLimitOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateCancelLimitOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateMultiHopSwapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySimulateMultiHopSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resp != nil {
		l = m.Resp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalcWithdrawableShares", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CalcWithdrawableShares = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTrancheUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LimitOrderTrancheUser == nil {
				m.LimitOrderTrancheUser = &LimitOrderTrancheUser{}
			}
			if err := m.LimitOrderTrancheUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawableShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.WithdrawableShares = &v
			if err := m.WithdrawableShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTrancheUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderTrancheUser = append(m.LimitOrderTrancheUser, &LimitOrderTrancheUser{})
			if err := m.LimitOrderTrancheUser[len(m.LimitOrderTrancheUser)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LimitOrderTranche == nil {
				m.LimitOrderTranche = &LimitOrderTranche{}
			}
			if err := m.LimitOrderTranche.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderTranche = append(m.LimitOrderTranche, &LimitOrderTranche{})
			if err := m.LimitOrderTranche[len(m.LimitOrderTranche)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludePoolData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludePoolData = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUserDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUserDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUserDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &DepositRecord{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheUserByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLimitOrderTrancheUserByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLimitOrderTrancheUserByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrders = append(m.LimitOrders, &LimitOrderTrancheUser{})
			if err := m.LimitOrders[len(m.LimitOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTickLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTickLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTickLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickLiquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickLiquidity = append(m.TickLiquidity, &TickLiquidity{})
			if err := m.TickLiquidity[len(m.TickLiquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInactiveLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInactiveLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInactiveLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrancheKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrancheKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInactiveLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInactiveLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInactiveLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveLimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InactiveLimitOrderTranche == nil {
				m.InactiveLimitOrderTranche = &LimitOrderTranche{}
			}
			if err := m.InactiveLimitOrderTranche.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInactiveLimitOrderTrancheRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInactiveLimitOrderTrancheRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInactiveLimitOrderTrancheRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInactiveLimitOrderTrancheResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInactiveLimitOrderTrancheResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInactiveLimitOrderTrancheResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveLimitOrderTranche", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InactiveLimitOrderTranche = append(m.InactiveLimitOrderTranche, &LimitOrderTranche{})
			if err := m.InactiveLimitOrderTranche[len(m.InactiveLimitOrderTranche)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolReservesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolReservesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolReservesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolReservesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolReservesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolReservesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolReserves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolReserves = append(m.PoolReserves, &PoolReserves{})
			if err := m.PoolReserves[len(m.PoolReserves)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolReservesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolReservesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolReservesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolReservesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolReservesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolReservesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolReserves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolReserves == nil {
				m.PoolReserves = &PoolReserves{}
			}
			if err := m.PoolReserves.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateMultiHopSwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateMultiHopSwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateMultiHopSwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &MultiHopRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitLimitPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitLimitPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PickBestRoute", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PickBestRoute = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimateMultiHopSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimateMultiHopSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimateMultiHopSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimatePlaceLimitOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimatePlaceLimitOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimatePlaceLimitOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndexInToOut", wireType)
			}
			m.TickIndexInToOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndexInToOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= LimitOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationTime == nil {
				m.ExpirationTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ExpirationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.MaxAmountOut = &v
			if err := m.MaxAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEstimatePlaceLimitOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEstimatePlaceLimitOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEstimatePlaceLimitOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalInCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalInCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapInCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapInCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapOutCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapOutCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			m.Fee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &Pool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPoolMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPoolMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPoolMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolMetadata = append(m.PoolMetadata, PoolMetadata{})
			if err := m.PoolMetadata[len(m.PoolMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgDeposit{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &MsgDepositResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateWithdrawalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateWithdrawalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateWithdrawalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgWithdrawal{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &MsgWithdrawalResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulatePlaceLimitOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulatePlaceLimitOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulatePlaceLimitOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgPlaceLimitOrder{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulatePlaceLimitOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulatePlaceLimitOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulatePlaceLimitOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &MsgPlaceLimitOrderResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateWithdrawFilledLimitOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateWithdrawFilledLimitOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateWithdrawFilledLimitOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgWithdrawFilledLimitOrder{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateWithdrawFilledLimitOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateWithdrawFilledLimitOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateWithdrawFilledLimitOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &MsgWithdrawFilledLimitOrderResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateCancelLimitOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateCancelLimitOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateCancelLimitOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgCancelLimitOrder{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateCancelLimitOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateCancelLimitOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateCancelLimitOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &MsgCancelLimitOrderResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateMultiHopSwapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateMultiHopSwapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateMultiHopSwapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgMultiHopSwap{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySimulateMultiHopSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySimulateMultiHopSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySimulateMultiHopSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resp == nil {
				m.Resp = &MsgMultiHopSwapResponse{}
			}
			if err := m.Resp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
